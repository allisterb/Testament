// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1alpha1/proto/grafeas.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1Alpha1.Api {

  /// <summary>Holder for reflection information generated from v1alpha1/proto/grafeas.proto</summary>
  public static partial class GrafeasReflection {

    #region Descriptor
    /// <summary>File descriptor for v1alpha1/proto/grafeas.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrafeasReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chx2MWFscGhhMS9wcm90by9ncmFmZWFzLnByb3RvEhRncmFmZWFzLnYxYWxw",
            "aGExLmFwaRobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGhxnb29nbGUv",
            "YXBpL2Fubm90YXRpb25zLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0",
            "YW1wLnByb3RvGiNnb29nbGUvbG9uZ3J1bm5pbmcvb3BlcmF0aW9ucy5wcm90",
            "bxouZ29vZ2xlL2RldnRvb2xzL3NvdXJjZS92MS9zb3VyY2VfY29udGV4dC5w",
            "cm90byIkChRHZXRPY2N1cnJlbmNlUmVxdWVzdBIMCgRuYW1lGAEgASgJIl8K",
            "Fkxpc3RPY2N1cnJlbmNlc1JlcXVlc3QSDgoGcGFyZW50GAUgASgJEg4KBmZp",
            "bHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoKcGFnZV90b2tlbhgE",
            "IAEoCSInChdEZWxldGVPY2N1cnJlbmNlUmVxdWVzdBIMCgRuYW1lGAEgASgJ",
            "Il8KF0NyZWF0ZU9jY3VycmVuY2VSZXF1ZXN0Eg4KBnBhcmVudBgDIAEoCRI0",
            "CgpvY2N1cnJlbmNlGAIgASgLMiAuZ3JhZmVhcy52MWFscGhhMS5hcGkuT2Nj",
            "dXJyZW5jZSJdChdVcGRhdGVPY2N1cnJlbmNlUmVxdWVzdBIMCgRuYW1lGAEg",
            "ASgJEjQKCm9jY3VycmVuY2UYAiABKAsyIC5ncmFmZWFzLnYxYWxwaGExLmFw",
            "aS5PY2N1cnJlbmNlIh4KDkdldE5vdGVSZXF1ZXN0EgwKBG5hbWUYASABKAki",
            "KAoYR2V0T2NjdXJyZW5jZU5vdGVSZXF1ZXN0EgwKBG5hbWUYASABKAkiZwoQ",
            "TGlzdE5vdGVzUmVxdWVzdBIMCgRuYW1lGAEgASgJEg4KBnBhcmVudBgFIAEo",
            "CRIOCgZmaWx0ZXIYAiABKAkSEQoJcGFnZV9zaXplGAMgASgFEhIKCnBhZ2Vf",
            "dG9rZW4YBCABKAkiIQoRRGVsZXRlTm90ZVJlcXVlc3QSDAoEbmFtZRgBIAEo",
            "CSJsChFDcmVhdGVOb3RlUmVxdWVzdBIMCgRuYW1lGAEgASgJEg4KBnBhcmVu",
            "dBgEIAEoCRIPCgdub3RlX2lkGAIgASgJEigKBG5vdGUYAyABKAsyGi5ncmFm",
            "ZWFzLnYxYWxwaGExLmFwaS5Ob3RlIksKEVVwZGF0ZU5vdGVSZXF1ZXN0EgwK",
            "BG5hbWUYASABKAkSKAoEbm90ZRgCIAEoCzIaLmdyYWZlYXMudjFhbHBoYTEu",
            "YXBpLk5vdGUiYQoaTGlzdE5vdGVPY2N1cnJlbmNlc1JlcXVlc3QSDAoEbmFt",
            "ZRgBIAEoCRIOCgZmaWx0ZXIYAiABKAkSEQoJcGFnZV9zaXplGAMgASgFEhIK",
            "CnBhZ2VfdG9rZW4YBCABKAkiawobTGlzdE5vdGVPY2N1cnJlbmNlc1Jlc3Bv",
            "bnNlEhUKDW5leHRQYWdlVG9rZW4YASABKAkSNQoLb2NjdXJyZW5jZXMYAiAD",
            "KAsyIC5ncmFmZWFzLnYxYWxwaGExLmFwaS5PY2N1cnJlbmNlIlUKEUxpc3RO",
            "b3Rlc1Jlc3BvbnNlEhUKDW5leHRQYWdlVG9rZW4YASABKAkSKQoFbm90ZXMY",
            "AiADKAsyGi5ncmFmZWFzLnYxYWxwaGExLmFwaS5Ob3RlImcKF0xpc3RPY2N1",
            "cnJlbmNlc1Jlc3BvbnNlEhUKDW5leHRQYWdlVG9rZW4YASABKAkSNQoLb2Nj",
            "dXJyZW5jZXMYAiADKAsyIC5ncmFmZWFzLnYxYWxwaGExLmFwaS5PY2N1cnJl",
            "bmNlImIKFkxpc3RPcGVyYXRpb25zUmVzcG9uc2USFQoNbmV4dFBhZ2VUb2tl",
            "bhgBIAEoCRIxCgpvcGVyYXRpb25zGAIgAygLMh0uZ29vZ2xlLmxvbmdydW5u",
            "aW5nLk9wZXJhdGlvbiJYChZVcGRhdGVPcGVyYXRpb25SZXF1ZXN0EgwKBG5h",
            "bWUYASABKAkSMAoJb3BlcmF0aW9uGAMgASgLMh0uZ29vZ2xlLmxvbmdydW5u",
            "aW5nLk9wZXJhdGlvbiJwChZDcmVhdGVPcGVyYXRpb25SZXF1ZXN0Eg4KBnBh",
            "cmVudBgBIAEoCRIUCgxvcGVyYXRpb25faWQYAiABKAkSMAoJb3BlcmF0aW9u",
            "GAMgASgLMh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJyChFPcGVy",
            "YXRpb25NZXRhZGF0YRIvCgtjcmVhdGVfdGltZRgBIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYAiABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wIjcKCEFydGlmYWN0EhAKCGNoZWNrc3VtGAEg",
            "ASgJEgoKAmlkGAIgASgJEg0KBW5hbWVzGAMgAygJIowCChRBdHRlc3RhdGlv",
            "bkF1dGhvcml0eRJRCgRoaW50GAEgASgLMkMuZ3JhZmVhcy52MWFscGhhMS5h",
            "cGkuQXR0ZXN0YXRpb25BdXRob3JpdHkuQXR0ZXN0YXRpb25BdXRob3JpdHlI",
            "aW50GjcKGEF0dGVzdGF0aW9uQXV0aG9yaXR5SGludBIbChNodW1hbl9yZWFk",
            "YWJsZV9uYW1lGAEgASgJGmgKC0F0dGVzdGF0aW9uEkwKFnBncF9zaWduZWRf",
            "YXR0ZXN0YXRpb24YASABKAsyKi5ncmFmZWFzLnYxYWxwaGExLmFwaS5QZ3BT",
            "aWduZWRBdHRlc3RhdGlvbkgAQgsKCXNpZ25hdHVyZSJjCgxCdWlsZERldGFp",
            "bHMSOQoKcHJvdmVuYW5jZRgBIAEoCzIlLmdyYWZlYXMudjFhbHBoYTEuYXBp",
            "LkJ1aWxkUHJvdmVuYW5jZRIYChBwcm92ZW5hbmNlX2J5dGVzGAIgASgJIv8D",
            "Cg9CdWlsZFByb3ZlbmFuY2USTgoNYnVpbGRfb3B0aW9ucxgBIAMoCzI3Lmdy",
            "YWZlYXMudjFhbHBoYTEuYXBpLkJ1aWxkUHJvdmVuYW5jZS5CdWlsZE9wdGlv",
            "bnNFbnRyeRIXCg9idWlsZGVyX3ZlcnNpb24YAiABKAkSNwoPYnVpbHRfYXJ0",
            "aWZhY3RzGAMgAygLMh4uZ3JhZmVhcy52MWFscGhhMS5hcGkuQXJ0aWZhY3QS",
            "LwoIY29tbWFuZHMYBCADKAsyHS5ncmFmZWFzLnYxYWxwaGExLmFwaS5Db21t",
            "YW5kEhMKC2NyZWF0ZV90aW1lGAUgASgJEg8KB2NyZWF0b3IYBiABKAkSEwoL",
            "ZmluaXNoX3RpbWUYByABKAkSCgoCaWQYCCABKAkSEwoLbG9nc19idWNrZXQY",
            "CSABKAkSEgoKcHJvamVjdF9pZBgKIAEoCRITCgtwcm9qZWN0X251bRgLIAEo",
            "CRI3ChFzb3VyY2VfcHJvdmVuYW5jZRgMIAEoCzIcLmdyYWZlYXMudjFhbHBo",
            "YTEuYXBpLlNvdXJjZRISCgpzdGFydF90aW1lGA0gASgJEhIKCnRyaWdnZXJf",
            "aWQYDiABKAkaMwoRQnVpbGRPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgJOgI4ASLCAQoOQnVpbGRTaWduYXR1cmUSDgoGa2V5X2lk",
            "GAEgASgJEj4KCGtleV90eXBlGAIgASgOMiwuZ3JhZmVhcy52MWFscGhhMS5h",
            "cGkuQnVpbGRTaWduYXR1cmUuS2V5VHlwZRISCgpwdWJsaWNfa2V5GAMgASgJ",
            "EhEKCXNpZ25hdHVyZRgEIAEoCSI5CgdLZXlUeXBlEgkKBVVOU0VUEAASFQoR",
            "UEdQX0FTQ0lJX0FSTU9SRUQQARIMCghQS0lYX1BFTRACIl0KCUJ1aWxkVHlw",
            "ZRIXCg9idWlsZGVyX3ZlcnNpb24YASABKAkSNwoJc2lnbmF0dXJlGAIgASgL",
            "MiQuZ3JhZmVhcy52MWFscGhhMS5hcGkuQnVpbGRTaWduYXR1cmUiXQoHQ29t",
            "bWFuZBIMCgRhcmdzGAEgAygJEgsKA2RpchgCIAEoCRILCgNlbnYYAyADKAkS",
            "CgoCaWQYBCABKAkSDAoEbmFtZRgFIAEoCRIQCgh3YWl0X2ZvchgGIAMoCSL6",
            "AQoKRGVwbG95YWJsZRIUCgxyZXNvdXJjZV91cmkYASADKAka1QEKCkRlcGxv",
            "eW1lbnQSDwoHYWRkcmVzcxgBIAEoCRJHCgZjb25maWcYAiADKAsyNy5ncmFm",
            "ZWFzLnYxYWxwaGExLmFwaS5EZXBsb3lhYmxlLkRlcGxveW1lbnQuQ29uZmln",
            "RW50cnkSEwoLZGVwbG95X3RpbWUYAyABKAkSFQoNdW5kZXBsb3lfdGltZRgE",
            "IAEoCRISCgp1c2VyX2VtYWlsGAUgASgJGi0KC0NvbmZpZ0VudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEivgUKC0RvY2tlckltYWdlGs8C",
            "CgVMYXllchIRCglhcmd1bWVudHMYASABKAkSRAoJZGlyZWN0aXZlGAIgASgO",
            "MjEuZ3JhZmVhcy52MWFscGhhMS5hcGkuRG9ja2VySW1hZ2UuTGF5ZXIuRGly",
            "ZWN0aXZlIuwBCglEaXJlY3RpdmUSFQoRVU5LTk9XTl9ESVJFQ1RJVkUQABIO",
            "CgpNQUlOVEFJTkVSEAESBwoDUlVOEAISBwoDQ01EEAMSCQoFTEFCRUwQBBIK",
            "CgZFWFBPU0UQBRIHCgNFTlYQBhIHCgNBREQQBxIICgRDT1BZEAgSDgoKRU5U",
            "UllQT0lOVBAJEgoKBlZPTFVNRRAKEggKBFVTRVIQCxILCgdXT1JLRElSEAwS",
            "BwoDQVJHEA0SCwoHT05CVUlMRBAOEg4KClNUT1BTSUdOQUwQDxIPCgtIRUFM",
            "VEhDSEVDSxAQEgkKBVNIRUxMEBEaQAoLRmluZ2VycHJpbnQSDwoHdjFfbmFt",
            "ZRgBIAEoCRIPCgd2Ml9ibG9iGAIgAygJEg8KB3YyX25hbWUYAyABKAkaYQoF",
            "QmFzaXMSQgoLZmluZ2VycHJpbnQYASABKAsyLS5ncmFmZWFzLnYxYWxwaGEx",
            "LmFwaS5Eb2NrZXJJbWFnZS5GaW5nZXJwcmludBIUCgxyZXNvdXJjZV91cmwY",
            "AiABKAkatwEKB0Rlcml2ZWQSGQoRYmFzZV9yZXNvdXJjZV91cmwYASABKAkS",
            "EAoIZGlzdGFuY2UYAiABKA0SQgoLZmluZ2VycHJpbnQYAyABKAsyLS5ncmFm",
            "ZWFzLnYxYWxwaGExLmFwaS5Eb2NrZXJJbWFnZS5GaW5nZXJwcmludBI7Cgps",
            "YXllcl9pbmZvGAQgAygLMicuZ3JhZmVhcy52MWFscGhhMS5hcGkuRG9ja2Vy",
            "SW1hZ2UuTGF5ZXIigwEKCURpc2NvdmVyeRI2Cg1hbmFseXNpc19raW5kGAEg",
            "ASgOMh8uZ3JhZmVhcy52MWFscGhhMS5hcGkuTm90ZS5LaW5kGj4KCkRpc2Nv",
            "dmVyZWQSMAoJb3BlcmF0aW9uGAEgASgLMh0uZ29vZ2xlLmxvbmdydW5uaW5n",
            "Lk9wZXJhdGlvbiI7CgpGaWxlSGFzaGVzEi0KCWZpbGVfaGFzaBgBIAMoCzIa",
            "LmdyYWZlYXMudjFhbHBoYTEuYXBpLkhhc2giawoESGFzaBItCgR0eXBlGAEg",
            "ASgOMh8uZ3JhZmVhcy52MWFscGhhMS5hcGkuSGFzaC5UeXBlEg0KBXZhbHVl",
            "GAIgASgJIiUKBFR5cGUSCAoETk9ORRAAEgoKBlNIQTI1NhABEgcKA01ENRAC",
            "IoAICgROb3RlEgwKBG5hbWUYASABKAkSGQoRc2hvcnRfZGVzY3JpcHRpb24Y",
            "AyABKAkSGAoQbG9uZ19kZXNjcmlwdGlvbhgEIAEoCRItCgRraW5kGAkgASgO",
            "Mh8uZ3JhZmVhcy52MWFscGhhMS5hcGkuTm90ZS5LaW5kEkUKEnZ1bG5lcmFi",
            "aWxpdHlfdHlwZRgGIAEoCzInLmdyYWZlYXMudjFhbHBoYTEuYXBpLlZ1bG5l",
            "cmFiaWxpdHlUeXBlSAASNQoKYnVpbGRfdHlwZRgIIAEoCzIfLmdyYWZlYXMu",
            "djFhbHBoYTEuYXBpLkJ1aWxkVHlwZUgAEj0KCmJhc2VfaW1hZ2UYDSABKAsy",
            "Jy5ncmFmZWFzLnYxYWxwaGExLmFwaS5Eb2NrZXJJbWFnZS5CYXNpc0gAEj8K",
            "B3BhY2thZ2UYDiABKAsyLC5ncmFmZWFzLnYxYWxwaGExLmFwaS5QYWNrYWdl",
            "TWFuYWdlci5QYWNrYWdlSAASNgoKZGVwbG95YWJsZRgRIAEoCzIgLmdyYWZl",
            "YXMudjFhbHBoYTEuYXBpLkRlcGxveWFibGVIABI0CglkaXNjb3ZlcnkYEiAB",
            "KAsyHy5ncmFmZWFzLnYxYWxwaGExLmFwaS5EaXNjb3ZlcnlIABJLChVhdHRl",
            "c3RhdGlvbl9hdXRob3JpdHkYEyABKAsyKi5ncmFmZWFzLnYxYWxwaGExLmFw",
            "aS5BdHRlc3RhdGlvbkF1dGhvcml0eUgAEjoKC3JlbGF0ZWRfdXJsGAcgAygL",
            "MiUuZ3JhZmVhcy52MWFscGhhMS5hcGkuTm90ZS5SZWxhdGVkVXJsEjMKD2V4",
            "cGlyYXRpb25fdGltZRgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASLwoLY3JlYXRlX3RpbWUYCyABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEi8KC3VwZGF0ZV90aW1lGAwgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBIWCg5vcGVyYXRpb25fbmFtZRgPIAEoCRooCgpSZWxhdGVk",
            "VXJsEgsKA3VybBgBIAEoCRINCgVsYWJlbBgCIAEoCSKqAQoES2luZBIUChBL",
            "SU5EX1VOU1BFQ0lGSUVEEAASGQoVUEFDS0FHRV9WVUxORVJBQklMSVRZEAES",
            "EQoNQlVJTERfREVUQUlMUxACEg8KC0lNQUdFX0JBU0lTEAMSEwoPUEFDS0FH",
            "RV9NQU5BR0VSEAQSDgoKREVQTE9ZQUJMRRAFEg0KCURJU0NPVkVSWRAGEhkK",
            "FUFUVEVTVEFUSU9OX0FVVEhPUklUWRAHQgsKCW5vdGVfdHlwZSKLBgoKT2Nj",
            "dXJyZW5jZRIMCgRuYW1lGAEgASgJEhQKDHJlc291cmNlX3VybBgCIAEoCRIR",
            "Cglub3RlX25hbWUYAyABKAkSLQoEa2luZBgGIAEoDjIfLmdyYWZlYXMudjFh",
            "bHBoYTEuYXBpLk5vdGUuS2luZBJdChV2dWxuZXJhYmlsaXR5X2RldGFpbHMY",
            "CCABKAsyPC5ncmFmZWFzLnYxYWxwaGExLmFwaS5WdWxuZXJhYmlsaXR5VHlw",
            "ZS5WdWxuZXJhYmlsaXR5RGV0YWlsc0gAEjsKDWJ1aWxkX2RldGFpbHMYByAB",
            "KAsyIi5ncmFmZWFzLnYxYWxwaGExLmFwaS5CdWlsZERldGFpbHNIABJCCg1k",
            "ZXJpdmVkX2ltYWdlGAsgASgLMikuZ3JhZmVhcy52MWFscGhhMS5hcGkuRG9j",
            "a2VySW1hZ2UuRGVyaXZlZEgAEkkKDGluc3RhbGxhdGlvbhgMIAEoCzIxLmdy",
            "YWZlYXMudjFhbHBoYTEuYXBpLlBhY2thZ2VNYW5hZ2VyLkluc3RhbGxhdGlv",
            "bkgAEkEKCmRlcGxveW1lbnQYDiABKAsyKy5ncmFmZWFzLnYxYWxwaGExLmFw",
            "aS5EZXBsb3lhYmxlLkRlcGxveW1lbnRIABJACgpkaXNjb3ZlcmVkGA8gASgL",
            "MiouZ3JhZmVhcy52MWFscGhhMS5hcGkuRGlzY292ZXJ5LkRpc2NvdmVyZWRI",
            "ABJNCgthdHRlc3RhdGlvbhgQIAEoCzI2LmdyYWZlYXMudjFhbHBoYTEuYXBp",
            "LkF0dGVzdGF0aW9uQXV0aG9yaXR5LkF0dGVzdGF0aW9uSAASEwoLcmVtZWRp",
            "YXRpb24YBSABKAkSLwoLY3JlYXRlX3RpbWUYCSABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEi8KC3VwZGF0ZV90aW1lGAogASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIWCg5vcGVyYXRpb25fbmFtZRgNIAEoCUIJ",
            "CgdkZXRhaWxzIpkGCg5QYWNrYWdlTWFuYWdlchpgCgdQYWNrYWdlEkcKDGRp",
            "c3RyaWJ1dGlvbhgBIAMoCzIxLmdyYWZlYXMudjFhbHBoYTEuYXBpLlBhY2th",
            "Z2VNYW5hZ2VyLkRpc3RyaWJ1dGlvbhIMCgRuYW1lGAIgASgJGqACCgxEaXN0",
            "cmlidXRpb24SVAoMYXJjaGl0ZWN0dXJlGAEgASgOMj4uZ3JhZmVhcy52MWFs",
            "cGhhMS5hcGkuUGFja2FnZU1hbmFnZXIuRGlzdHJpYnV0aW9uLkFyY2hpdGVj",
            "dHVyZRIPCgdjcGVfdXJpGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEkQK",
            "DmxhdGVzdF92ZXJzaW9uGAQgASgLMiwuZ3JhZmVhcy52MWFscGhhMS5hcGku",
            "UGFja2FnZU1hbmFnZXIuVmVyc2lvbhISCgptYWludGFpbmVyGAUgASgJEgsK",
            "A3VybBgGIAEoCSItCgxBcmNoaXRlY3R1cmUSCwoHVU5LTk9XThAAEgcKA1g4",
            "NhABEgcKA1g2NBACGrUBCgdWZXJzaW9uEg0KBWVwb2NoGAEgASgFEgwKBG5h",
            "bWUYAiABKAkSEAoIcmV2aXNpb24YAyABKAkSRgoEa2luZBgFIAEoDjI4Lmdy",
            "YWZlYXMudjFhbHBoYTEuYXBpLlBhY2thZ2VNYW5hZ2VyLlZlcnNpb24uVmVy",
            "c2lvbktpbmQiMwoLVmVyc2lvbktpbmQSCgoGTk9STUFMEAASCwoHTUlOSU1V",
            "TRABEgsKB01BWElNVU0QAhprCghMb2NhdGlvbhIPCgdjcGVfdXJpGAEgASgJ",
            "EgwKBHBhdGgYAiABKAkSQAoHdmVyc2lvbhgDIAEoCzIvLmdyYWZlYXMudjFh",
            "bHBoYTEuYXBpLlZ1bG5lcmFiaWxpdHlUeXBlLlZlcnNpb24aXQoMSW5zdGFs",
            "bGF0aW9uEgwKBG5hbWUYASABKAkSPwoIbG9jYXRpb24YAiADKAsyLS5ncmFm",
            "ZWFzLnYxYWxwaGExLmFwaS5QYWNrYWdlTWFuYWdlci5Mb2NhdGlvbiLdAQoU",
            "UGdwU2lnbmVkQXR0ZXN0YXRpb24SEQoJc2lnbmF0dXJlGAEgASgJEkwKDGNv",
            "bnRlbnRfdHlwZRgDIAEoDjI2LmdyYWZlYXMudjFhbHBoYTEuYXBpLlBncFNp",
            "Z25lZEF0dGVzdGF0aW9uLkNvbnRlbnRUeXBlEhQKCnBncF9rZXlfaWQYAiAB",
            "KAlIACJECgtDb250ZW50VHlwZRIcChhDT05URU5UX1RZUEVfVU5TUEVDSUZJ",
            "RUQQABIXChNTSU1QTEVfU0lHTklOR19KU09OEAFCCAoGa2V5X2lkIpAECgZT",
            "b3VyY2USQQoOc3RvcmFnZV9zb3VyY2UYASABKAsyIy5ncmFmZWFzLnYxYWxw",
            "aGExLmFwaS5TdG9yYWdlU291cmNlQgIYAUgAEjsKC3JlcG9fc291cmNlGAIg",
            "ASgLMiAuZ3JhZmVhcy52MWFscGhhMS5hcGkuUmVwb1NvdXJjZUICGAFIABJE",
            "ChdhcnRpZmFjdF9zdG9yYWdlX3NvdXJjZRgEIAEoCzIjLmdyYWZlYXMudjFh",
            "bHBoYTEuYXBpLlN0b3JhZ2VTb3VyY2USSAoOc291cmNlX2NvbnRleHQYBSAB",
            "KAsyMC5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkV4dGVuZGVkU291cmNl",
            "Q29udGV4dBJUChphZGRpdGlvbmFsX3NvdXJjZV9jb250ZXh0cxgGIAMoCzIw",
            "Lmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEuRXh0ZW5kZWRTb3VyY2VDb250",
            "ZXh0EkEKC2ZpbGVfaGFzaGVzGAMgAygLMiwuZ3JhZmVhcy52MWFscGhhMS5h",
            "cGkuU291cmNlLkZpbGVIYXNoZXNFbnRyeRpTCg9GaWxlSGFzaGVzRW50cnkS",
            "CwoDa2V5GAEgASgJEi8KBXZhbHVlGAIgASgLMiAuZ3JhZmVhcy52MWFscGhh",
            "MS5hcGkuRmlsZUhhc2hlczoCOAFCCAoGc291cmNlIoABCgpSZXBvU291cmNl",
            "EhIKCnByb2plY3RfaWQYASABKAkSEQoJcmVwb19uYW1lGAIgASgJEhUKC2Jy",
            "YW5jaF9uYW1lGAMgASgJSAASEgoIdGFnX25hbWUYBCABKAlIABIUCgpjb21t",
            "aXRfc2hhGAUgASgJSABCCgoIcmV2aXNpb24iQwoNU3RvcmFnZVNvdXJjZRIO",
            "CgZidWNrZXQYASABKAkSEgoKZ2VuZXJhdGlvbhgCIAEoCRIOCgZvYmplY3QY",
            "AyABKAkizQoKEVZ1bG5lcmFiaWxpdHlUeXBlEhIKCmN2c3Nfc2NvcmUYAiAB",
            "KAISQgoIc2V2ZXJpdHkYAyABKA4yMC5ncmFmZWFzLnYxYWxwaGExLmFwaS5W",
            "dWxuZXJhYmlsaXR5VHlwZS5TZXZlcml0eRI/CgdkZXRhaWxzGAQgAygLMi4u",
            "Z3JhZmVhcy52MWFscGhhMS5hcGkuVnVsbmVyYWJpbGl0eVR5cGUuRGV0YWls",
            "GrgBCgdWZXJzaW9uEg0KBWVwb2NoGAEgASgFEgwKBG5hbWUYAiABKAkSEAoI",
            "cmV2aXNpb24YAyABKAkSSQoEa2luZBgFIAEoDjI7LmdyYWZlYXMudjFhbHBo",
            "YTEuYXBpLlZ1bG5lcmFiaWxpdHlUeXBlLlZlcnNpb24uVmVyc2lvbktpbmQi",
            "MwoLVmVyc2lvbktpbmQSCgoGTk9STUFMEAASCwoHTUlOSU1VTRABEgsKB01B",
            "WElNVU0QAhrhAgoGRGV0YWlsEg8KB2NwZV91cmkYASABKAkSDwoHcGFja2Fn",
            "ZRgIIAEoCRJNChRtaW5fYWZmZWN0ZWRfdmVyc2lvbhgGIAEoCzIvLmdyYWZl",
            "YXMudjFhbHBoYTEuYXBpLlZ1bG5lcmFiaWxpdHlUeXBlLlZlcnNpb24STQoU",
            "bWF4X2FmZmVjdGVkX3ZlcnNpb24YByABKAsyLy5ncmFmZWFzLnYxYWxwaGEx",
            "LmFwaS5WdWxuZXJhYmlsaXR5VHlwZS5WZXJzaW9uEhUKDXNldmVyaXR5X25h",
            "bWUYBCABKAkSEwoLZGVzY3JpcHRpb24YCSABKAkSVQoOZml4ZWRfbG9jYXRp",
            "b24YBSABKAsyPS5ncmFmZWFzLnYxYWxwaGExLmFwaS5WdWxuZXJhYmlsaXR5",
            "VHlwZS5WdWxuZXJhYmlsaXR5TG9jYXRpb24SFAoMcGFja2FnZV90eXBlGAog",
            "ASgJGskBChRWdWxuZXJhYmlsaXR5RGV0YWlscxIMCgR0eXBlGAMgASgJEkIK",
            "CHNldmVyaXR5GAQgASgOMjAuZ3JhZmVhcy52MWFscGhhMS5hcGkuVnVsbmVy",
            "YWJpbGl0eVR5cGUuU2V2ZXJpdHkSEgoKY3Zzc19zY29yZRgFIAEoAhJLCg1w",
            "YWNrYWdlX2lzc3VlGAYgAygLMjQuZ3JhZmVhcy52MWFscGhhMS5hcGkuVnVs",
            "bmVyYWJpbGl0eVR5cGUuUGFja2FnZUlzc3VlGtYBCgxQYWNrYWdlSXNzdWUS",
            "WAoRYWZmZWN0ZWRfbG9jYXRpb24YASABKAsyPS5ncmFmZWFzLnYxYWxwaGEx",
            "LmFwaS5WdWxuZXJhYmlsaXR5VHlwZS5WdWxuZXJhYmlsaXR5TG9jYXRpb24S",
            "VQoOZml4ZWRfbG9jYXRpb24YAiABKAsyPS5ncmFmZWFzLnYxYWxwaGExLmFw",
            "aS5WdWxuZXJhYmlsaXR5VHlwZS5WdWxuZXJhYmlsaXR5TG9jYXRpb24SFQoN",
            "c2V2ZXJpdHlfbmFtZRgDIAEoCRp7ChVWdWxuZXJhYmlsaXR5TG9jYXRpb24S",
            "DwoHY3BlX3VyaRgBIAEoCRIPCgdwYWNrYWdlGAIgASgJEkAKB3ZlcnNpb24Y",
            "BCABKAsyLy5ncmFmZWFzLnYxYWxwaGExLmFwaS5WdWxuZXJhYmlsaXR5VHlw",
            "ZS5WZXJzaW9uIl4KCFNldmVyaXR5EhgKFFNFVkVSSVRZX1VOU1BFQ0lGSUVE",
            "EAASCwoHTUlOSU1BTBABEgcKA0xPVxACEgoKBk1FRElVTRADEggKBEhJR0gQ",
            "BBIMCghDUklUSUNBTBAFMqYQCgdHcmFmZWFzEpABCg1HZXRPY2N1cnJlbmNl",
            "EiouZ3JhZmVhcy52MWFscGhhMS5hcGkuR2V0T2NjdXJyZW5jZVJlcXVlc3Qa",
            "IC5ncmFmZWFzLnYxYWxwaGExLmFwaS5PY2N1cnJlbmNlIjGC0+STAisSKS92",
            "MWFscGhhMS97bmFtZT1wcm9qZWN0cy8qL29jY3VycmVuY2VzLyp9EqEBCg9M",
            "aXN0T2NjdXJyZW5jZXMSLC5ncmFmZWFzLnYxYWxwaGExLmFwaS5MaXN0T2Nj",
            "dXJyZW5jZXNSZXF1ZXN0Gi0uZ3JhZmVhcy52MWFscGhhMS5hcGkuTGlzdE9j",
            "Y3VycmVuY2VzUmVzcG9uc2UiMYLT5JMCKxIpL3YxYWxwaGExL3twYXJlbnQ9",
            "cHJvamVjdHMvKn0vb2NjdXJyZW5jZXMSjAEKEERlbGV0ZU9jY3VycmVuY2US",
            "LS5ncmFmZWFzLnYxYWxwaGExLmFwaS5EZWxldGVPY2N1cnJlbmNlUmVxdWVz",
            "dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIxgtPkkwIrKikvdjFhbHBoYTEv",
            "e25hbWU9cHJvamVjdHMvKi9vY2N1cnJlbmNlcy8qfRKiAQoQQ3JlYXRlT2Nj",
            "dXJyZW5jZRItLmdyYWZlYXMudjFhbHBoYTEuYXBpLkNyZWF0ZU9jY3VycmVu",
            "Y2VSZXF1ZXN0GiAuZ3JhZmVhcy52MWFscGhhMS5hcGkuT2NjdXJyZW5jZSI9",
            "gtPkkwI3IikvdjFhbHBoYTEve3BhcmVudD1wcm9qZWN0cy8qfS9vY2N1cnJl",
            "bmNlczoKb2NjdXJyZW5jZRKiAQoQVXBkYXRlT2NjdXJyZW5jZRItLmdyYWZl",
            "YXMudjFhbHBoYTEuYXBpLlVwZGF0ZU9jY3VycmVuY2VSZXF1ZXN0GiAuZ3Jh",
            "ZmVhcy52MWFscGhhMS5hcGkuT2NjdXJyZW5jZSI9gtPkkwI3MikvdjFhbHBo",
            "YTEve25hbWU9cHJvamVjdHMvKi9vY2N1cnJlbmNlcy8qfToKb2NjdXJyZW5j",
            "ZRKYAQoRR2V0T2NjdXJyZW5jZU5vdGUSLi5ncmFmZWFzLnYxYWxwaGExLmFw",
            "aS5HZXRPY2N1cnJlbmNlTm90ZVJlcXVlc3QaGi5ncmFmZWFzLnYxYWxwaGEx",
            "LmFwaS5Ob3RlIjeC0+STAjESLy92MWFscGhhMS97bmFtZT1wcm9qZWN0cy8q",
            "L29jY3VycmVuY2VzLyp9L25vdGVzEngKB0dldE5vdGUSJC5ncmFmZWFzLnYx",
            "YWxwaGExLmFwaS5HZXROb3RlUmVxdWVzdBoaLmdyYWZlYXMudjFhbHBoYTEu",
            "YXBpLk5vdGUiK4LT5JMCJRIjL3YxYWxwaGExL3tuYW1lPXByb2plY3RzLyov",
            "bm90ZXMvKn0SiQEKCUxpc3ROb3RlcxImLmdyYWZlYXMudjFhbHBoYTEuYXBp",
            "Lkxpc3ROb3Rlc1JlcXVlc3QaJy5ncmFmZWFzLnYxYWxwaGExLmFwaS5MaXN0",
            "Tm90ZXNSZXNwb25zZSIrgtPkkwIlEiMvdjFhbHBoYTEve3BhcmVudD1wcm9q",
            "ZWN0cy8qfS9ub3RlcxJ6CgpEZWxldGVOb3RlEicuZ3JhZmVhcy52MWFscGhh",
            "MS5hcGkuRGVsZXRlTm90ZVJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiK4LT5JMCJSojL3YxYWxwaGExL3tuYW1lPXByb2plY3RzLyovbm90ZXMv",
            "Kn0ShAEKCkNyZWF0ZU5vdGUSJy5ncmFmZWFzLnYxYWxwaGExLmFwaS5DcmVh",
            "dGVOb3RlUmVxdWVzdBoaLmdyYWZlYXMudjFhbHBoYTEuYXBpLk5vdGUiMYLT",
            "5JMCKyIjL3YxYWxwaGExL3twYXJlbnQ9cHJvamVjdHMvKn0vbm90ZXM6BG5v",
            "dGUShAEKClVwZGF0ZU5vdGUSJy5ncmFmZWFzLnYxYWxwaGExLmFwaS5VcGRh",
            "dGVOb3RlUmVxdWVzdBoaLmdyYWZlYXMudjFhbHBoYTEuYXBpLk5vdGUiMYLT",
            "5JMCKzIjL3YxYWxwaGExL3tuYW1lPXByb2plY3RzLyovbm90ZXMvKn06BG5v",
            "dGUSswEKE0xpc3ROb3RlT2NjdXJyZW5jZXMSMC5ncmFmZWFzLnYxYWxwaGEx",
            "LmFwaS5MaXN0Tm90ZU9jY3VycmVuY2VzUmVxdWVzdBoxLmdyYWZlYXMudjFh",
            "bHBoYTEuYXBpLkxpc3ROb3RlT2NjdXJyZW5jZXNSZXNwb25zZSI3gtPkkwIx",
            "Ei8vdjFhbHBoYTEve25hbWU9cHJvamVjdHMvKi9ub3Rlcy8qfS9vY2N1cnJl",
            "bmNlcxKTAQoPQ3JlYXRlT3BlcmF0aW9uEiwuZ3JhZmVhcy52MWFscGhhMS5h",
            "cGkuQ3JlYXRlT3BlcmF0aW9uUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmlu",
            "Zy5PcGVyYXRpb24iM4LT5JMCLSIoL3YxYWxwaGExL3twYXJlbnQ9cHJvamVj",
            "dHMvKn0vb3BlcmF0aW9uczoBKhKTAQoPVXBkYXRlT3BlcmF0aW9uEiwuZ3Jh",
            "ZmVhcy52MWFscGhhMS5hcGkuVXBkYXRlT3BlcmF0aW9uUmVxdWVzdBodLmdv",
            "b2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iM4LT5JMCLTIoL3YxYWxwaGEx",
            "L3tuYW1lPXByb2plY3RzLyovb3BlcmF0aW9ucy8qfToBKkIJWgdncmFmZWFz",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest), global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest), global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest.Parser, new[]{ "Parent", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest), global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest), global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest.Parser, new[]{ "Parent", "Occurrence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest), global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest.Parser, new[]{ "Name", "Occurrence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.GetNoteRequest), global::Grafeas.V1Alpha1.Api.GetNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest), global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.ListNotesRequest), global::Grafeas.V1Alpha1.Api.ListNotesRequest.Parser, new[]{ "Name", "Parent", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.DeleteNoteRequest), global::Grafeas.V1Alpha1.Api.DeleteNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.CreateNoteRequest), global::Grafeas.V1Alpha1.Api.CreateNoteRequest.Parser, new[]{ "Name", "Parent", "NoteId", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.UpdateNoteRequest), global::Grafeas.V1Alpha1.Api.UpdateNoteRequest.Parser, new[]{ "Name", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest), global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest.Parser, new[]{ "Name", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse), global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse.Parser, new[]{ "NextPageToken", "Occurrences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.ListNotesResponse), global::Grafeas.V1Alpha1.Api.ListNotesResponse.Parser, new[]{ "NextPageToken", "Notes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse), global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse.Parser, new[]{ "NextPageToken", "Occurrences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.ListOperationsResponse), global::Grafeas.V1Alpha1.Api.ListOperationsResponse.Parser, new[]{ "NextPageToken", "Operations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.UpdateOperationRequest), global::Grafeas.V1Alpha1.Api.UpdateOperationRequest.Parser, new[]{ "Name", "Operation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.CreateOperationRequest), global::Grafeas.V1Alpha1.Api.CreateOperationRequest.Parser, new[]{ "Parent", "OperationId", "Operation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.OperationMetadata), global::Grafeas.V1Alpha1.Api.OperationMetadata.Parser, new[]{ "CreateTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Artifact), global::Grafeas.V1Alpha1.Api.Artifact.Parser, new[]{ "Checksum", "Id", "Names" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.AttestationAuthority), global::Grafeas.V1Alpha1.Api.AttestationAuthority.Parser, new[]{ "Hint" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.AttestationAuthorityHint), global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.AttestationAuthorityHint.Parser, new[]{ "HumanReadableName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.Attestation), global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.Attestation.Parser, new[]{ "PgpSignedAttestation" }, new[]{ "Signature" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.BuildDetails), global::Grafeas.V1Alpha1.Api.BuildDetails.Parser, new[]{ "Provenance", "ProvenanceBytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.BuildProvenance), global::Grafeas.V1Alpha1.Api.BuildProvenance.Parser, new[]{ "BuildOptions", "BuilderVersion", "BuiltArtifacts", "Commands", "CreateTime", "Creator", "FinishTime", "Id", "LogsBucket", "ProjectId", "ProjectNum", "SourceProvenance", "StartTime", "TriggerId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.BuildSignature), global::Grafeas.V1Alpha1.Api.BuildSignature.Parser, new[]{ "KeyId", "KeyType", "PublicKey", "Signature" }, null, new[]{ typeof(global::Grafeas.V1Alpha1.Api.BuildSignature.Types.KeyType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.BuildType), global::Grafeas.V1Alpha1.Api.BuildType.Parser, new[]{ "BuilderVersion", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Command), global::Grafeas.V1Alpha1.Api.Command.Parser, new[]{ "Args", "Dir", "Env", "Id", "Name", "WaitFor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Deployable), global::Grafeas.V1Alpha1.Api.Deployable.Parser, new[]{ "ResourceUri" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Deployable.Types.Deployment), global::Grafeas.V1Alpha1.Api.Deployable.Types.Deployment.Parser, new[]{ "Address", "Config", "DeployTime", "UndeployTime", "UserEmail" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.DockerImage), global::Grafeas.V1Alpha1.Api.DockerImage.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer), global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer.Parser, new[]{ "Arguments", "Directive" }, null, new[]{ typeof(global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer.Types.Directive) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint), global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint.Parser, new[]{ "V1Name", "V2Blob", "V2Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.DockerImage.Types.Basis), global::Grafeas.V1Alpha1.Api.DockerImage.Types.Basis.Parser, new[]{ "Fingerprint", "ResourceUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.DockerImage.Types.Derived), global::Grafeas.V1Alpha1.Api.DockerImage.Types.Derived.Parser, new[]{ "BaseResourceUrl", "Distance", "Fingerprint", "LayerInfo" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Discovery), global::Grafeas.V1Alpha1.Api.Discovery.Parser, new[]{ "AnalysisKind" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Discovery.Types.Discovered), global::Grafeas.V1Alpha1.Api.Discovery.Types.Discovered.Parser, new[]{ "Operation" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.FileHashes), global::Grafeas.V1Alpha1.Api.FileHashes.Parser, new[]{ "FileHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Hash), global::Grafeas.V1Alpha1.Api.Hash.Parser, new[]{ "Type", "Value" }, null, new[]{ typeof(global::Grafeas.V1Alpha1.Api.Hash.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Note), global::Grafeas.V1Alpha1.Api.Note.Parser, new[]{ "Name", "ShortDescription", "LongDescription", "Kind", "VulnerabilityType", "BuildType", "BaseImage", "Package", "Deployable", "Discovery", "AttestationAuthority", "RelatedUrl", "ExpirationTime", "CreateTime", "UpdateTime", "OperationName" }, new[]{ "NoteType" }, new[]{ typeof(global::Grafeas.V1Alpha1.Api.Note.Types.Kind) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Note.Types.RelatedUrl), global::Grafeas.V1Alpha1.Api.Note.Types.RelatedUrl.Parser, new[]{ "Url", "Label" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Occurrence), global::Grafeas.V1Alpha1.Api.Occurrence.Parser, new[]{ "Name", "ResourceUrl", "NoteName", "Kind", "VulnerabilityDetails", "BuildDetails", "DerivedImage", "Installation", "Deployment", "Discovered", "Attestation", "Remediation", "CreateTime", "UpdateTime", "OperationName" }, new[]{ "Details" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.PackageManager), global::Grafeas.V1Alpha1.Api.PackageManager.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.PackageManager.Types.Package), global::Grafeas.V1Alpha1.Api.PackageManager.Types.Package.Parser, new[]{ "Distribution", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution), global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution.Parser, new[]{ "Architecture", "CpeUri", "Description", "LatestVersion", "Maintainer", "Url" }, null, new[]{ typeof(global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution.Types.Architecture) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version), global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version.Parser, new[]{ "Epoch", "Name", "Revision", "Kind" }, null, new[]{ typeof(global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version.Types.VersionKind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.PackageManager.Types.Location), global::Grafeas.V1Alpha1.Api.PackageManager.Types.Location.Parser, new[]{ "CpeUri", "Path", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.PackageManager.Types.Installation), global::Grafeas.V1Alpha1.Api.PackageManager.Types.Installation.Parser, new[]{ "Name", "Location" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.PgpSignedAttestation), global::Grafeas.V1Alpha1.Api.PgpSignedAttestation.Parser, new[]{ "Signature", "ContentType", "PgpKeyId" }, new[]{ "KeyId" }, new[]{ typeof(global::Grafeas.V1Alpha1.Api.PgpSignedAttestation.Types.ContentType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.Source), global::Grafeas.V1Alpha1.Api.Source.Parser, new[]{ "StorageSource", "RepoSource", "ArtifactStorageSource", "SourceContext", "AdditionalSourceContexts", "FileHashes" }, new[]{ "Source" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.RepoSource), global::Grafeas.V1Alpha1.Api.RepoSource.Parser, new[]{ "ProjectId", "RepoName", "BranchName", "TagName", "CommitSha" }, new[]{ "Revision" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.StorageSource), global::Grafeas.V1Alpha1.Api.StorageSource.Parser, new[]{ "Bucket", "Generation", "Object" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType), global::Grafeas.V1Alpha1.Api.VulnerabilityType.Parser, new[]{ "CvssScore", "Severity", "Details" }, null, new[]{ typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Severity) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version), global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version.Parser, new[]{ "Epoch", "Name", "Revision", "Kind" }, null, new[]{ typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version.Types.VersionKind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Detail), global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Detail.Parser, new[]{ "CpeUri", "Package", "MinAffectedVersion", "MaxAffectedVersion", "SeverityName", "Description", "FixedLocation", "PackageType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityDetails), global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityDetails.Parser, new[]{ "Type", "Severity", "CvssScore", "PackageIssue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.PackageIssue), global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.PackageIssue.Parser, new[]{ "AffectedLocation", "FixedLocation", "SeverityName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation), global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation.Parser, new[]{ "CpeUri", "Package", "Version" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request to get a Occurrence.
  /// </summary>
  public sealed partial class GetOccurrenceRequest : pb::IMessage<GetOccurrenceRequest> {
    private static readonly pb::MessageParser<GetOccurrenceRequest> _parser = new pb::MessageParser<GetOccurrenceRequest>(() => new GetOccurrenceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest(GetOccurrenceRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest Clone() {
      return new GetOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form
    /// "projects/{project_id}/occurrences/{occurrence_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list occurrences.
  /// </summary>
  public sealed partial class ListOccurrencesRequest : pb::IMessage<ListOccurrencesRequest> {
    private static readonly pb::MessageParser<ListOccurrencesRequest> _parser = new pb::MessageParser<ListOccurrencesRequest>(() => new ListOccurrencesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest(ListOccurrencesRequest other) : this() {
      parent_ = other.parent_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest Clone() {
      return new ListOccurrencesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 5;
    private string parent_ = "";
    /// <summary>
    /// This contains the projectId for example: projects/{project_id}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of occurrences to return in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (Parent.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Parent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 42: {
            Parent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to delete a occurrence
  /// </summary>
  public sealed partial class DeleteOccurrenceRequest : pb::IMessage<DeleteOccurrenceRequest> {
    private static readonly pb::MessageParser<DeleteOccurrenceRequest> _parser = new pb::MessageParser<DeleteOccurrenceRequest>(() => new DeleteOccurrenceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest(DeleteOccurrenceRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest Clone() {
      return new DeleteOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form
    /// "projects/{project_id}/occurrences/{occurrence_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to insert a new occurrence
  /// </summary>
  public sealed partial class CreateOccurrenceRequest : pb::IMessage<CreateOccurrenceRequest> {
    private static readonly pb::MessageParser<CreateOccurrenceRequest> _parser = new pb::MessageParser<CreateOccurrenceRequest>(() => new CreateOccurrenceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest(CreateOccurrenceRequest other) : this() {
      parent_ = other.parent_;
      Occurrence = other.occurrence_ != null ? other.Occurrence.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest Clone() {
      return new CreateOccurrenceRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 3;
    private string parent_ = "";
    /// <summary>
    /// This field contains the projectId for example: "projects/{project_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrence" field.</summary>
    public const int OccurrenceFieldNumber = 2;
    private global::Grafeas.V1Alpha1.Api.Occurrence occurrence_;
    /// <summary>
    /// The occurrence to be inserted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Occurrence Occurrence {
      get { return occurrence_; }
      set {
        occurrence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(Occurrence, other.Occurrence)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (occurrence_ != null) hash ^= Occurrence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (occurrence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Occurrence);
      }
      if (Parent.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Parent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (occurrence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occurrence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.occurrence_ != null) {
        if (occurrence_ == null) {
          occurrence_ = new global::Grafeas.V1Alpha1.Api.Occurrence();
        }
        Occurrence.MergeFrom(other.Occurrence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (occurrence_ == null) {
              occurrence_ = new global::Grafeas.V1Alpha1.Api.Occurrence();
            }
            input.ReadMessage(occurrence_);
            break;
          }
          case 26: {
            Parent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to update an existing occurrence
  /// </summary>
  public sealed partial class UpdateOccurrenceRequest : pb::IMessage<UpdateOccurrenceRequest> {
    private static readonly pb::MessageParser<UpdateOccurrenceRequest> _parser = new pb::MessageParser<UpdateOccurrenceRequest>(() => new UpdateOccurrenceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest(UpdateOccurrenceRequest other) : this() {
      name_ = other.name_;
      Occurrence = other.occurrence_ != null ? other.Occurrence.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest Clone() {
      return new UpdateOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence.
    /// Should be of the form "projects/{project_id}/occurrences/{occurrence_id}".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrence" field.</summary>
    public const int OccurrenceFieldNumber = 2;
    private global::Grafeas.V1Alpha1.Api.Occurrence occurrence_;
    /// <summary>
    /// The updated occurrence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Occurrence Occurrence {
      get { return occurrence_; }
      set {
        occurrence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Occurrence, other.Occurrence)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (occurrence_ != null) hash ^= Occurrence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (occurrence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Occurrence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (occurrence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occurrence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.occurrence_ != null) {
        if (occurrence_ == null) {
          occurrence_ = new global::Grafeas.V1Alpha1.Api.Occurrence();
        }
        Occurrence.MergeFrom(other.Occurrence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (occurrence_ == null) {
              occurrence_ = new global::Grafeas.V1Alpha1.Api.Occurrence();
            }
            input.ReadMessage(occurrence_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get a Note.
  /// </summary>
  public sealed partial class GetNoteRequest : pb::IMessage<GetNoteRequest> {
    private static readonly pb::MessageParser<GetNoteRequest> _parser = new pb::MessageParser<GetNoteRequest>(() => new GetNoteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest(GetNoteRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest Clone() {
      return new GetNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form
    /// "providers/{provider_id}/notes/{note_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get the note to which this occurrence is attached.
  /// </summary>
  public sealed partial class GetOccurrenceNoteRequest : pb::IMessage<GetOccurrenceNoteRequest> {
    private static readonly pb::MessageParser<GetOccurrenceNoteRequest> _parser = new pb::MessageParser<GetOccurrenceNoteRequest>(() => new GetOccurrenceNoteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOccurrenceNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest(GetOccurrenceNoteRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest Clone() {
      return new GetOccurrenceNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form
    /// "projects/{project_id}/occurrences/{occurrence_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOccurrenceNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOccurrenceNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOccurrenceNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list notes.
  /// </summary>
  public sealed partial class ListNotesRequest : pb::IMessage<ListNotesRequest> {
    private static readonly pb::MessageParser<ListNotesRequest> _parser = new pb::MessageParser<ListNotesRequest>(() => new ListNotesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest(ListNotesRequest other) : this() {
      name_ = other.name_;
      parent_ = other.parent_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest Clone() {
      return new ListNotesRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name field will contain the projectId for example:
    /// "providers/{provider_id}
    /// @Deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 5;
    private string parent_ = "";
    /// <summary>
    /// This field contains the projectId for example:
    /// "project/{project_id}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of notes to return in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (Parent.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Parent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 42: {
            Parent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to delete a note
  /// </summary>
  public sealed partial class DeleteNoteRequest : pb::IMessage<DeleteNoteRequest> {
    private static readonly pb::MessageParser<DeleteNoteRequest> _parser = new pb::MessageParser<DeleteNoteRequest>(() => new DeleteNoteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest(DeleteNoteRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest Clone() {
      return new DeleteNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form
    /// "providers/{provider_id}/notes/{note_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to insert a new note
  /// </summary>
  public sealed partial class CreateNoteRequest : pb::IMessage<CreateNoteRequest> {
    private static readonly pb::MessageParser<CreateNoteRequest> _parser = new pb::MessageParser<CreateNoteRequest>(() => new CreateNoteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest(CreateNoteRequest other) : this() {
      name_ = other.name_;
      parent_ = other.parent_;
      noteId_ = other.noteId_;
      Note = other.note_ != null ? other.Note.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest Clone() {
      return new CreateNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the project.
    /// Should be of the form "providers/{provider_id}".
    /// @Deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 4;
    private string parent_ = "";
    /// <summary>
    /// This field contains the projectId for example:
    /// "project/{project_id}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note_id" field.</summary>
    public const int NoteIdFieldNumber = 2;
    private string noteId_ = "";
    /// <summary>
    /// The ID to use for this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteId {
      get { return noteId_; }
      set {
        noteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 3;
    private global::Grafeas.V1Alpha1.Api.Note note_;
    /// <summary>
    /// The Note to be inserted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Parent != other.Parent) return false;
      if (NoteId != other.NoteId) return false;
      if (!object.Equals(Note, other.Note)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (NoteId.Length != 0) hash ^= NoteId.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (NoteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NoteId);
      }
      if (note_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Note);
      }
      if (Parent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Parent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (NoteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteId);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.NoteId.Length != 0) {
        NoteId = other.NoteId;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          note_ = new global::Grafeas.V1Alpha1.Api.Note();
        }
        Note.MergeFrom(other.Note);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            NoteId = input.ReadString();
            break;
          }
          case 26: {
            if (note_ == null) {
              note_ = new global::Grafeas.V1Alpha1.Api.Note();
            }
            input.ReadMessage(note_);
            break;
          }
          case 34: {
            Parent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to update an existing note
  /// </summary>
  public sealed partial class UpdateNoteRequest : pb::IMessage<UpdateNoteRequest> {
    private static readonly pb::MessageParser<UpdateNoteRequest> _parser = new pb::MessageParser<UpdateNoteRequest>(() => new UpdateNoteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest(UpdateNoteRequest other) : this() {
      name_ = other.name_;
      Note = other.note_ != null ? other.Note.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest Clone() {
      return new UpdateNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note.
    /// Should be of the form "projects/{provider_id}/notes/{note_id}".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 2;
    private global::Grafeas.V1Alpha1.Api.Note note_;
    /// <summary>
    /// The updated note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Note, other.Note)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (note_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Note);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          note_ = new global::Grafeas.V1Alpha1.Api.Note();
        }
        Note.MergeFrom(other.Note);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (note_ == null) {
              note_ = new global::Grafeas.V1Alpha1.Api.Note();
            }
            input.ReadMessage(note_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list occurrences.
  /// </summary>
  public sealed partial class ListNoteOccurrencesRequest : pb::IMessage<ListNoteOccurrencesRequest> {
    private static readonly pb::MessageParser<ListNoteOccurrencesRequest> _parser = new pb::MessageParser<ListNoteOccurrencesRequest>(() => new ListNoteOccurrencesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNoteOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest(ListNoteOccurrencesRequest other) : this() {
      name_ = other.name_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest Clone() {
      return new ListNoteOccurrencesRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name field will contain the note name for example:
    ///   "provider/{provider_id}/notes/{note_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of notes to return in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNoteOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNoteOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNoteOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response including listed occurrences for a note.
  /// </summary>
  public sealed partial class ListNoteOccurrencesResponse : pb::IMessage<ListNoteOccurrencesResponse> {
    private static readonly pb::MessageParser<ListNoteOccurrencesResponse> _parser = new pb::MessageParser<ListNoteOccurrencesResponse>(() => new ListNoteOccurrencesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNoteOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse(ListNoteOccurrencesResponse other) : this() {
      nextPageToken_ = other.nextPageToken_;
      occurrences_ = other.occurrences_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse Clone() {
      return new ListNoteOccurrencesResponse(this);
    }

    /// <summary>Field number for the "nextPageToken" field.</summary>
    public const int NextPageTokenFieldNumber = 1;
    private string nextPageToken_ = "";
    /// <summary>
    /// Token to receive the next page of notes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(18, global::Grafeas.V1Alpha1.Api.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Occurrence>();
    /// <summary>
    /// The occurrences attached to the specified note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNoteOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNoteOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextPageToken != other.NextPageToken) return false;
      if(!occurrences_.Equals(other.occurrences_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      hash ^= occurrences_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NextPageToken);
      }
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNoteOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      occurrences_.Add(other.occurrences_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NextPageToken = input.ReadString();
            break;
          }
          case 18: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response including listed notes.
  /// </summary>
  public sealed partial class ListNotesResponse : pb::IMessage<ListNotesResponse> {
    private static readonly pb::MessageParser<ListNotesResponse> _parser = new pb::MessageParser<ListNotesResponse>(() => new ListNotesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse(ListNotesResponse other) : this() {
      nextPageToken_ = other.nextPageToken_;
      notes_ = other.notes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse Clone() {
      return new ListNotesResponse(this);
    }

    /// <summary>Field number for the "nextPageToken" field.</summary>
    public const int NextPageTokenFieldNumber = 1;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.Note> _repeated_notes_codec
        = pb::FieldCodec.ForMessage(18, global::Grafeas.V1Alpha1.Api.Note.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Note> notes_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Note>();
    /// <summary>
    /// The occurrences requested
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Note> Notes {
      get { return notes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextPageToken != other.NextPageToken) return false;
      if(!notes_.Equals(other.notes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      hash ^= notes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NextPageToken);
      }
      notes_.WriteTo(output, _repeated_notes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      size += notes_.CalculateSize(_repeated_notes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotesResponse other) {
      if (other == null) {
        return;
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      notes_.Add(other.notes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NextPageToken = input.ReadString();
            break;
          }
          case 18: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response including listed occurrences.
  /// </summary>
  public sealed partial class ListOccurrencesResponse : pb::IMessage<ListOccurrencesResponse> {
    private static readonly pb::MessageParser<ListOccurrencesResponse> _parser = new pb::MessageParser<ListOccurrencesResponse>(() => new ListOccurrencesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse(ListOccurrencesResponse other) : this() {
      nextPageToken_ = other.nextPageToken_;
      occurrences_ = other.occurrences_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse Clone() {
      return new ListOccurrencesResponse(this);
    }

    /// <summary>Field number for the "nextPageToken" field.</summary>
    public const int NextPageTokenFieldNumber = 1;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(18, global::Grafeas.V1Alpha1.Api.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Occurrence>();
    /// <summary>
    /// The occurrences requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextPageToken != other.NextPageToken) return false;
      if(!occurrences_.Equals(other.occurrences_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      hash ^= occurrences_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NextPageToken);
      }
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      occurrences_.Add(other.occurrences_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NextPageToken = input.ReadString();
            break;
          }
          case 18: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response including listed operations.
  /// </summary>
  public sealed partial class ListOperationsResponse : pb::IMessage<ListOperationsResponse> {
    private static readonly pb::MessageParser<ListOperationsResponse> _parser = new pb::MessageParser<ListOperationsResponse>(() => new ListOperationsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOperationsResponse(ListOperationsResponse other) : this() {
      nextPageToken_ = other.nextPageToken_;
      operations_ = other.operations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOperationsResponse Clone() {
      return new ListOperationsResponse(this);
    }

    /// <summary>Field number for the "nextPageToken" field.</summary>
    public const int NextPageTokenFieldNumber = 1;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.LongRunning.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(18, global::Google.LongRunning.Operation.Parser);
    private readonly pbc::RepeatedField<global::Google.LongRunning.Operation> operations_ = new pbc::RepeatedField<global::Google.LongRunning.Operation>();
    /// <summary>
    /// The operations requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.LongRunning.Operation> Operations {
      get { return operations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextPageToken != other.NextPageToken) return false;
      if(!operations_.Equals(other.operations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      hash ^= operations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NextPageToken);
      }
      operations_.WriteTo(output, _repeated_operations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      size += operations_.CalculateSize(_repeated_operations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOperationsResponse other) {
      if (other == null) {
        return;
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      operations_.Add(other.operations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NextPageToken = input.ReadString();
            break;
          }
          case 18: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for updating an existing operation
  /// </summary>
  public sealed partial class UpdateOperationRequest : pb::IMessage<UpdateOperationRequest> {
    private static readonly pb::MessageParser<UpdateOperationRequest> _parser = new pb::MessageParser<UpdateOperationRequest>(() => new UpdateOperationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOperationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOperationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOperationRequest(UpdateOperationRequest other) : this() {
      name_ = other.name_;
      Operation = other.operation_ != null ? other.Operation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOperationRequest Clone() {
      return new UpdateOperationRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the Operation.
    /// Should be of the form "projects/{provider_id}/operations/{operation_id}".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 3;
    private global::Google.LongRunning.Operation operation_;
    /// <summary>
    /// The operation to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.LongRunning.Operation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOperationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOperationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (operation_ != null) hash ^= Operation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (operation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Operation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (operation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOperationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.operation_ != null) {
        if (operation_ == null) {
          operation_ = new global::Google.LongRunning.Operation();
        }
        Operation.MergeFrom(other.Operation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (operation_ == null) {
              operation_ = new global::Google.LongRunning.Operation();
            }
            input.ReadMessage(operation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for creating an operation
  /// </summary>
  public sealed partial class CreateOperationRequest : pb::IMessage<CreateOperationRequest> {
    private static readonly pb::MessageParser<CreateOperationRequest> _parser = new pb::MessageParser<CreateOperationRequest>(() => new CreateOperationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOperationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOperationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOperationRequest(CreateOperationRequest other) : this() {
      parent_ = other.parent_;
      operationId_ = other.operationId_;
      Operation = other.operation_ != null ? other.Operation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOperationRequest Clone() {
      return new CreateOperationRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The projectId that this operation should be created under.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation_id" field.</summary>
    public const int OperationIdFieldNumber = 2;
    private string operationId_ = "";
    /// <summary>
    /// The ID to use for this operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationId {
      get { return operationId_; }
      set {
        operationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 3;
    private global::Google.LongRunning.Operation operation_;
    /// <summary>
    /// The operation to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.LongRunning.Operation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOperationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOperationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (OperationId != other.OperationId) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (OperationId.Length != 0) hash ^= OperationId.GetHashCode();
      if (operation_ != null) hash ^= Operation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (OperationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OperationId);
      }
      if (operation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Operation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (OperationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationId);
      }
      if (operation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOperationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.OperationId.Length != 0) {
        OperationId = other.OperationId;
      }
      if (other.operation_ != null) {
        if (operation_ == null) {
          operation_ = new global::Google.LongRunning.Operation();
        }
        Operation.MergeFrom(other.Operation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            OperationId = input.ReadString();
            break;
          }
          case 26: {
            if (operation_ == null) {
              operation_ = new global::Google.LongRunning.Operation();
            }
            input.ReadMessage(operation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OperationMetadata can be used to provide additional information inside a google.longrunning.operation
  /// </summary>
  public sealed partial class OperationMetadata : pb::IMessage<OperationMetadata> {
    private static readonly pb::MessageParser<OperationMetadata> _parser = new pb::MessageParser<OperationMetadata>(() => new OperationMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationMetadata(OperationMetadata other) : this() {
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      EndTime = other.endTime_ != null ? other.EndTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationMetadata Clone() {
      return new OperationMetadata(this);
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time this operation was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// Output only. The time that this operation was marked completed or failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationMetadata other) {
      if (other == null) {
        return;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(endTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Artifact describes a build product.
  /// </summary>
  public sealed partial class Artifact : pb::IMessage<Artifact> {
    private static readonly pb::MessageParser<Artifact> _parser = new pb::MessageParser<Artifact>(() => new Artifact());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artifact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact(Artifact other) : this() {
      checksum_ = other.checksum_;
      id_ = other.id_;
      names_ = other.names_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact Clone() {
      return new Artifact(this);
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 1;
    private string checksum_ = "";
    /// <summary>
    /// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
    /// container.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Checksum {
      get { return checksum_; }
      set {
        checksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// Artifact ID, if any; for container images, this will be a URL by digest
    /// like gcr.io/projectID/imagename@sha256:123456
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "names" field.</summary>
    public const int NamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_names_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Related artifact names. This may be the path to a binary or jar file, or in
    /// the case of a container build, the name used to push the container image to
    /// Google Container Registry, as presented to `docker push`. Note that a
    /// single Artifact ID can have multiple names, for example if two tags are
    /// applied to one image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Names {
      get { return names_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artifact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artifact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Checksum != other.Checksum) return false;
      if (Id != other.Id) return false;
      if(!names_.Equals(other.names_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Checksum.Length != 0) hash ^= Checksum.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= names_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Checksum.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Checksum);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      names_.WriteTo(output, _repeated_names_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Checksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Checksum);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += names_.CalculateSize(_repeated_names_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artifact other) {
      if (other == null) {
        return;
      }
      if (other.Checksum.Length != 0) {
        Checksum = other.Checksum;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      names_.Add(other.names_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Checksum = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            names_.AddEntriesFrom(input, _repeated_names_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Note kind that represents a logical attestation "role" or "authority".  For
  /// example, an organization might have one AttestationAuthority for "QA" and one
  /// for "build".  This Note is intended to act strictly as a grouping mechanism
  /// for the attached Occurrences (Attestations).  This grouping mechanism also
  /// provides a security boundary, since IAM ACLs gate the ability for a principle
  /// to attach an Occurrence to a given Note.  It also provides a single point of
  /// lookup to find all attached Attestation Occurrences, even if they don't all
  /// live in the same project.
  /// </summary>
  public sealed partial class AttestationAuthority : pb::IMessage<AttestationAuthority> {
    private static readonly pb::MessageParser<AttestationAuthority> _parser = new pb::MessageParser<AttestationAuthority>(() => new AttestationAuthority());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttestationAuthority> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttestationAuthority() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttestationAuthority(AttestationAuthority other) : this() {
      Hint = other.hint_ != null ? other.Hint.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttestationAuthority Clone() {
      return new AttestationAuthority(this);
    }

    /// <summary>Field number for the "hint" field.</summary>
    public const int HintFieldNumber = 1;
    private global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.AttestationAuthorityHint hint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.AttestationAuthorityHint Hint {
      get { return hint_; }
      set {
        hint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttestationAuthority);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttestationAuthority other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hint, other.Hint)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hint_ != null) hash ^= Hint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttestationAuthority other) {
      if (other == null) {
        return;
      }
      if (other.hint_ != null) {
        if (hint_ == null) {
          hint_ = new global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.AttestationAuthorityHint();
        }
        Hint.MergeFrom(other.Hint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hint_ == null) {
              hint_ = new global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.AttestationAuthorityHint();
            }
            input.ReadMessage(hint_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttestationAuthority message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AttestationAuthorityHint : pb::IMessage<AttestationAuthorityHint> {
        private static readonly pb::MessageParser<AttestationAuthorityHint> _parser = new pb::MessageParser<AttestationAuthorityHint>(() => new AttestationAuthorityHint());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttestationAuthorityHint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.AttestationAuthority.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttestationAuthorityHint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttestationAuthorityHint(AttestationAuthorityHint other) : this() {
          humanReadableName_ = other.humanReadableName_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttestationAuthorityHint Clone() {
          return new AttestationAuthorityHint(this);
        }

        /// <summary>Field number for the "human_readable_name" field.</summary>
        public const int HumanReadableNameFieldNumber = 1;
        private string humanReadableName_ = "";
        /// <summary>
        /// The human readable name of this Attestation Authority, e.g. "qa".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HumanReadableName {
          get { return humanReadableName_; }
          set {
            humanReadableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttestationAuthorityHint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttestationAuthorityHint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HumanReadableName != other.HumanReadableName) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HumanReadableName.Length != 0) hash ^= HumanReadableName.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HumanReadableName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(HumanReadableName);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HumanReadableName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(HumanReadableName);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttestationAuthorityHint other) {
          if (other == null) {
            return;
          }
          if (other.HumanReadableName.Length != 0) {
            HumanReadableName = other.HumanReadableName;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                HumanReadableName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Attestation : pb::IMessage<Attestation> {
        private static readonly pb::MessageParser<Attestation> _parser = new pb::MessageParser<Attestation>(() => new Attestation());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attestation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.AttestationAuthority.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attestation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attestation(Attestation other) : this() {
          switch (other.SignatureCase) {
            case SignatureOneofCase.PgpSignedAttestation:
              PgpSignedAttestation = other.PgpSignedAttestation.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attestation Clone() {
          return new Attestation(this);
        }

        /// <summary>Field number for the "pgp_signed_attestation" field.</summary>
        public const int PgpSignedAttestationFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.PgpSignedAttestation PgpSignedAttestation {
          get { return signatureCase_ == SignatureOneofCase.PgpSignedAttestation ? (global::Grafeas.V1Alpha1.Api.PgpSignedAttestation) signature_ : null; }
          set {
            signature_ = value;
            signatureCase_ = value == null ? SignatureOneofCase.None : SignatureOneofCase.PgpSignedAttestation;
          }
        }

        private object signature_;
        /// <summary>Enum of possible cases for the "signature" oneof.</summary>
        public enum SignatureOneofCase {
          None = 0,
          PgpSignedAttestation = 1,
        }
        private SignatureOneofCase signatureCase_ = SignatureOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignatureOneofCase SignatureCase {
          get { return signatureCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSignature() {
          signatureCase_ = SignatureOneofCase.None;
          signature_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attestation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attestation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(PgpSignedAttestation, other.PgpSignedAttestation)) return false;
          if (SignatureCase != other.SignatureCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) hash ^= PgpSignedAttestation.GetHashCode();
          hash ^= (int) signatureCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) {
            output.WriteRawTag(10);
            output.WriteMessage(PgpSignedAttestation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PgpSignedAttestation);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attestation other) {
          if (other == null) {
            return;
          }
          switch (other.SignatureCase) {
            case SignatureOneofCase.PgpSignedAttestation:
              PgpSignedAttestation = other.PgpSignedAttestation;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Grafeas.V1Alpha1.Api.PgpSignedAttestation subBuilder = new global::Grafeas.V1Alpha1.Api.PgpSignedAttestation();
                if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) {
                  subBuilder.MergeFrom(PgpSignedAttestation);
                }
                input.ReadMessage(subBuilder);
                PgpSignedAttestation = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Message encapsulating build provenance details
  /// </summary>
  public sealed partial class BuildDetails : pb::IMessage<BuildDetails> {
    private static readonly pb::MessageParser<BuildDetails> _parser = new pb::MessageParser<BuildDetails>(() => new BuildDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildDetails(BuildDetails other) : this() {
      Provenance = other.provenance_ != null ? other.Provenance.Clone() : null;
      provenanceBytes_ = other.provenanceBytes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildDetails Clone() {
      return new BuildDetails(this);
    }

    /// <summary>Field number for the "provenance" field.</summary>
    public const int ProvenanceFieldNumber = 1;
    private global::Grafeas.V1Alpha1.Api.BuildProvenance provenance_;
    /// <summary>
    /// The actual provenance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.BuildProvenance Provenance {
      get { return provenance_; }
      set {
        provenance_ = value;
      }
    }

    /// <summary>Field number for the "provenance_bytes" field.</summary>
    public const int ProvenanceBytesFieldNumber = 2;
    private string provenanceBytes_ = "";
    /// <summary>
    /// Serialized json representation of the provenance, used in generating the
    /// BuildSignature in the corresponding Result. After verifying the signature,
    /// provenance_bytes can be unmarshalled and compared to the provenance to
    /// confirm that it is unchanged. A base64-encoded string representation of the
    /// provenance bytes is used for the signature in order to interoperate with
    /// openssl which expects this format for signature verification.
    /// 
    /// The serialized form is captured both to avoid ambiguity in how the
    /// provenance is marshalled to json as well to prevent incompatibilities with
    /// future changes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProvenanceBytes {
      get { return provenanceBytes_; }
      set {
        provenanceBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Provenance, other.Provenance)) return false;
      if (ProvenanceBytes != other.ProvenanceBytes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (provenance_ != null) hash ^= Provenance.GetHashCode();
      if (ProvenanceBytes.Length != 0) hash ^= ProvenanceBytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (provenance_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Provenance);
      }
      if (ProvenanceBytes.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProvenanceBytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (provenance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Provenance);
      }
      if (ProvenanceBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProvenanceBytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildDetails other) {
      if (other == null) {
        return;
      }
      if (other.provenance_ != null) {
        if (provenance_ == null) {
          provenance_ = new global::Grafeas.V1Alpha1.Api.BuildProvenance();
        }
        Provenance.MergeFrom(other.Provenance);
      }
      if (other.ProvenanceBytes.Length != 0) {
        ProvenanceBytes = other.ProvenanceBytes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (provenance_ == null) {
              provenance_ = new global::Grafeas.V1Alpha1.Api.BuildProvenance();
            }
            input.ReadMessage(provenance_);
            break;
          }
          case 18: {
            ProvenanceBytes = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provenance of a build. Contains all information needed to verify the full
  /// details about the build from source to completion.
  /// </summary>
  public sealed partial class BuildProvenance : pb::IMessage<BuildProvenance> {
    private static readonly pb::MessageParser<BuildProvenance> _parser = new pb::MessageParser<BuildProvenance>(() => new BuildProvenance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildProvenance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProvenance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProvenance(BuildProvenance other) : this() {
      buildOptions_ = other.buildOptions_.Clone();
      builderVersion_ = other.builderVersion_;
      builtArtifacts_ = other.builtArtifacts_.Clone();
      commands_ = other.commands_.Clone();
      createTime_ = other.createTime_;
      creator_ = other.creator_;
      finishTime_ = other.finishTime_;
      id_ = other.id_;
      logsBucket_ = other.logsBucket_;
      projectId_ = other.projectId_;
      projectNum_ = other.projectNum_;
      SourceProvenance = other.sourceProvenance_ != null ? other.SourceProvenance.Clone() : null;
      startTime_ = other.startTime_;
      triggerId_ = other.triggerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProvenance Clone() {
      return new BuildProvenance(this);
    }

    /// <summary>Field number for the "build_options" field.</summary>
    public const int BuildOptionsFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_buildOptions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> buildOptions_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Special options applied to this build. This is a catch-all field where
    /// build providers can enter any desired additional details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> BuildOptions {
      get { return buildOptions_; }
    }

    /// <summary>Field number for the "builder_version" field.</summary>
    public const int BuilderVersionFieldNumber = 2;
    private string builderVersion_ = "";
    /// <summary>
    /// Version string of the builder at the time this build was executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuilderVersion {
      get { return builderVersion_; }
      set {
        builderVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "built_artifacts" field.</summary>
    public const int BuiltArtifactsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.Artifact> _repeated_builtArtifacts_codec
        = pb::FieldCodec.ForMessage(26, global::Grafeas.V1Alpha1.Api.Artifact.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Artifact> builtArtifacts_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Artifact>();
    /// <summary>
    /// Output of the build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Artifact> BuiltArtifacts {
      get { return builtArtifacts_; }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.Command> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(34, global::Grafeas.V1Alpha1.Api.Command.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Command> commands_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Command>();
    /// <summary>
    /// Commands requested by the build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Command> Commands {
      get { return commands_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private string createTime_ = "";
    /// <summary>
    /// Time at which the build was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 6;
    private string creator_ = "";
    /// <summary>
    /// E-mail address of the user who initiated this build. Note that this was the
    /// user's e-mail address at the time the build was initiated; this address may
    /// not represent the same end-user for all time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Creator {
      get { return creator_; }
      set {
        creator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "finish_time" field.</summary>
    public const int FinishTimeFieldNumber = 7;
    private string finishTime_ = "";
    /// <summary>
    /// Time at which execution of the build was finished.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 8;
    private string id_ = "";
    /// <summary>
    /// Unique identifier of the build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logs_bucket" field.</summary>
    public const int LogsBucketFieldNumber = 9;
    private string logsBucket_ = "";
    /// <summary>
    /// Google Cloud Storage bucket where logs were written.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogsBucket {
      get { return logsBucket_; }
      set {
        logsBucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 10;
    private string projectId_ = "";
    /// <summary>
    /// ID of the project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_num" field.</summary>
    public const int ProjectNumFieldNumber = 11;
    private string projectNum_ = "";
    /// <summary>
    /// Numerical ID of the project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectNum {
      get { return projectNum_; }
      set {
        projectNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_provenance" field.</summary>
    public const int SourceProvenanceFieldNumber = 12;
    private global::Grafeas.V1Alpha1.Api.Source sourceProvenance_;
    /// <summary>
    /// Details of the Source input to the build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Source SourceProvenance {
      get { return sourceProvenance_; }
      set {
        sourceProvenance_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 13;
    private string startTime_ = "";
    /// <summary>
    /// Time at which execution of the build was started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_id" field.</summary>
    public const int TriggerIdFieldNumber = 14;
    private string triggerId_ = "";
    /// <summary>
    /// Trigger identifier if the build was triggered automatically; empty if not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerId {
      get { return triggerId_; }
      set {
        triggerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildProvenance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildProvenance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!BuildOptions.Equals(other.BuildOptions)) return false;
      if (BuilderVersion != other.BuilderVersion) return false;
      if(!builtArtifacts_.Equals(other.builtArtifacts_)) return false;
      if(!commands_.Equals(other.commands_)) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Creator != other.Creator) return false;
      if (FinishTime != other.FinishTime) return false;
      if (Id != other.Id) return false;
      if (LogsBucket != other.LogsBucket) return false;
      if (ProjectId != other.ProjectId) return false;
      if (ProjectNum != other.ProjectNum) return false;
      if (!object.Equals(SourceProvenance, other.SourceProvenance)) return false;
      if (StartTime != other.StartTime) return false;
      if (TriggerId != other.TriggerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= BuildOptions.GetHashCode();
      if (BuilderVersion.Length != 0) hash ^= BuilderVersion.GetHashCode();
      hash ^= builtArtifacts_.GetHashCode();
      hash ^= commands_.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (Creator.Length != 0) hash ^= Creator.GetHashCode();
      if (FinishTime.Length != 0) hash ^= FinishTime.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (LogsBucket.Length != 0) hash ^= LogsBucket.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (ProjectNum.Length != 0) hash ^= ProjectNum.GetHashCode();
      if (sourceProvenance_ != null) hash ^= SourceProvenance.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (TriggerId.Length != 0) hash ^= TriggerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buildOptions_.WriteTo(output, _map_buildOptions_codec);
      if (BuilderVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BuilderVersion);
      }
      builtArtifacts_.WriteTo(output, _repeated_builtArtifacts_codec);
      commands_.WriteTo(output, _repeated_commands_codec);
      if (CreateTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CreateTime);
      }
      if (Creator.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Creator);
      }
      if (FinishTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FinishTime);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Id);
      }
      if (LogsBucket.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(LogsBucket);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ProjectId);
      }
      if (ProjectNum.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ProjectNum);
      }
      if (sourceProvenance_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SourceProvenance);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StartTime);
      }
      if (TriggerId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TriggerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buildOptions_.CalculateSize(_map_buildOptions_codec);
      if (BuilderVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuilderVersion);
      }
      size += builtArtifacts_.CalculateSize(_repeated_builtArtifacts_codec);
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (Creator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Creator);
      }
      if (FinishTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FinishTime);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LogsBucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogsBucket);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (ProjectNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectNum);
      }
      if (sourceProvenance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceProvenance);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (TriggerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildProvenance other) {
      if (other == null) {
        return;
      }
      buildOptions_.Add(other.buildOptions_);
      if (other.BuilderVersion.Length != 0) {
        BuilderVersion = other.BuilderVersion;
      }
      builtArtifacts_.Add(other.builtArtifacts_);
      commands_.Add(other.commands_);
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.Creator.Length != 0) {
        Creator = other.Creator;
      }
      if (other.FinishTime.Length != 0) {
        FinishTime = other.FinishTime;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.LogsBucket.Length != 0) {
        LogsBucket = other.LogsBucket;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.ProjectNum.Length != 0) {
        ProjectNum = other.ProjectNum;
      }
      if (other.sourceProvenance_ != null) {
        if (sourceProvenance_ == null) {
          sourceProvenance_ = new global::Grafeas.V1Alpha1.Api.Source();
        }
        SourceProvenance.MergeFrom(other.SourceProvenance);
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.TriggerId.Length != 0) {
        TriggerId = other.TriggerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            buildOptions_.AddEntriesFrom(input, _map_buildOptions_codec);
            break;
          }
          case 18: {
            BuilderVersion = input.ReadString();
            break;
          }
          case 26: {
            builtArtifacts_.AddEntriesFrom(input, _repeated_builtArtifacts_codec);
            break;
          }
          case 34: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
          case 42: {
            CreateTime = input.ReadString();
            break;
          }
          case 50: {
            Creator = input.ReadString();
            break;
          }
          case 58: {
            FinishTime = input.ReadString();
            break;
          }
          case 66: {
            Id = input.ReadString();
            break;
          }
          case 74: {
            LogsBucket = input.ReadString();
            break;
          }
          case 82: {
            ProjectId = input.ReadString();
            break;
          }
          case 90: {
            ProjectNum = input.ReadString();
            break;
          }
          case 98: {
            if (sourceProvenance_ == null) {
              sourceProvenance_ = new global::Grafeas.V1Alpha1.Api.Source();
            }
            input.ReadMessage(sourceProvenance_);
            break;
          }
          case 106: {
            StartTime = input.ReadString();
            break;
          }
          case 114: {
            TriggerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message encapsulating signature of the verified build
  /// </summary>
  public sealed partial class BuildSignature : pb::IMessage<BuildSignature> {
    private static readonly pb::MessageParser<BuildSignature> _parser = new pb::MessageParser<BuildSignature>(() => new BuildSignature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildSignature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSignature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSignature(BuildSignature other) : this() {
      keyId_ = other.keyId_;
      keyType_ = other.keyType_;
      publicKey_ = other.publicKey_;
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSignature Clone() {
      return new BuildSignature(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// An ID for the key used to sign.  This could be either an ID for the key
    /// stored in `public_key` (e.g., the ID or fingerprint for a PGP key, or the
    /// CN for a cert), or a reference to an external key (e.g., a reference to a
    /// key in Cloud KMS).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_type" field.</summary>
    public const int KeyTypeFieldNumber = 2;
    private global::Grafeas.V1Alpha1.Api.BuildSignature.Types.KeyType keyType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.BuildSignature.Types.KeyType KeyType {
      get { return keyType_; }
      set {
        keyType_ = value;
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 3;
    private string publicKey_ = "";
    /// <summary>
    /// Public key of the builder which can be used to verify that related
    /// Findings are valid and unchanged.  If `key_type` is empty this defaults
    /// to PEM encoded public keys.
    /// 
    /// This field may be empty if `key_id` references an external key.
    /// 
    /// For Cloud Container Builder based signatures this is a PEM encoded public
    /// key. To verify the Cloud Container Builder signature, place the contents of
    /// this field into a file (public.pem). The signature field is base64-decoded
    /// into its binary representation in signature.bin, and the provenance bytes
    /// from BuildDetails are base64-decoded into a binary representation in
    /// signed.bin. OpenSSL can then verify the signature:
    /// `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 4;
    private string signature_ = "";
    /// <summary>
    /// Signature of the related BuildProvenance, encoded in a base64 string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildSignature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildSignature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (KeyType != other.KeyType) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (KeyType != 0) hash ^= KeyType.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (KeyType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) KeyType);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PublicKey);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (KeyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildSignature other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.KeyType != 0) {
        KeyType = other.KeyType;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 16: {
            keyType_ = (global::Grafeas.V1Alpha1.Api.BuildSignature.Types.KeyType) input.ReadEnum();
            break;
          }
          case 26: {
            PublicKey = input.ReadString();
            break;
          }
          case 34: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BuildSignature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of the key, either stored in `public_key` or referenced in
      /// `key_id`
      /// </summary>
      public enum KeyType {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("PGP_ASCII_ARMORED")] PgpAsciiArmored = 1,
        [pbr::OriginalName("PKIX_PEM")] PkixPem = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Note holding the version of the provider's builder and the signature of
  /// the provenance message in linked BuildDetails.
  /// </summary>
  public sealed partial class BuildType : pb::IMessage<BuildType> {
    private static readonly pb::MessageParser<BuildType> _parser = new pb::MessageParser<BuildType>(() => new BuildType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildType(BuildType other) : this() {
      builderVersion_ = other.builderVersion_;
      Signature = other.signature_ != null ? other.Signature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildType Clone() {
      return new BuildType(this);
    }

    /// <summary>Field number for the "builder_version" field.</summary>
    public const int BuilderVersionFieldNumber = 1;
    private string builderVersion_ = "";
    /// <summary>
    /// Version of the builder which produced this Note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuilderVersion {
      get { return builderVersion_; }
      set {
        builderVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private global::Grafeas.V1Alpha1.Api.BuildSignature signature_;
    /// <summary>
    /// Signature of the build in Occurrences pointing to the Note containing this
    /// BuilderDetails.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.BuildSignature Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuilderVersion != other.BuilderVersion) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuilderVersion.Length != 0) hash ^= BuilderVersion.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuilderVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BuilderVersion);
      }
      if (signature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuilderVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuilderVersion);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildType other) {
      if (other == null) {
        return;
      }
      if (other.BuilderVersion.Length != 0) {
        BuilderVersion = other.BuilderVersion;
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          signature_ = new global::Grafeas.V1Alpha1.Api.BuildSignature();
        }
        Signature.MergeFrom(other.Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BuilderVersion = input.ReadString();
            break;
          }
          case 18: {
            if (signature_ == null) {
              signature_ = new global::Grafeas.V1Alpha1.Api.BuildSignature();
            }
            input.ReadMessage(signature_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Command describes a step performed as part of the build pipeline.
  /// </summary>
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      args_ = other.args_.Clone();
      dir_ = other.dir_;
      env_ = other.env_.Clone();
      id_ = other.id_;
      name_ = other.name_;
      waitFor_ = other.waitFor_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Command-line arguments used when executing this Command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private string dir_ = "";
    /// <summary>
    /// Working directory (relative to project source root) used when running
    /// this Command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dir {
      get { return dir_; }
      set {
        dir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_env_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> env_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Environment variables set before running this Command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private string id_ = "";
    /// <summary>
    /// Optional unique identifier for this Command, used in wait_for to reference
    /// this Command as a dependency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// Name of the command, as presented on the command line, or if the command is
    /// packaged as a Docker container, as presented to `docker pull`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wait_for" field.</summary>
    public const int WaitForFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_waitFor_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> waitFor_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The ID(s) of the Command(s) that this Command depends on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WaitFor {
      get { return waitFor_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!args_.Equals(other.args_)) return false;
      if (Dir != other.Dir) return false;
      if(!env_.Equals(other.env_)) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!waitFor_.Equals(other.waitFor_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= args_.GetHashCode();
      if (Dir.Length != 0) hash ^= Dir.GetHashCode();
      hash ^= env_.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= waitFor_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      args_.WriteTo(output, _repeated_args_codec);
      if (Dir.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dir);
      }
      env_.WriteTo(output, _repeated_env_codec);
      if (Id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      waitFor_.WriteTo(output, _repeated_waitFor_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += args_.CalculateSize(_repeated_args_codec);
      if (Dir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dir);
      }
      size += env_.CalculateSize(_repeated_env_codec);
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += waitFor_.CalculateSize(_repeated_waitFor_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      args_.Add(other.args_);
      if (other.Dir.Length != 0) {
        Dir = other.Dir;
      }
      env_.Add(other.env_);
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      waitFor_.Add(other.waitFor_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 18: {
            Dir = input.ReadString();
            break;
          }
          case 26: {
            env_.AddEntriesFrom(input, _repeated_env_codec);
            break;
          }
          case 34: {
            Id = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            waitFor_.AddEntriesFrom(input, _repeated_waitFor_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An artifact that can be deployed in some runtime.
  /// </summary>
  public sealed partial class Deployable : pb::IMessage<Deployable> {
    private static readonly pb::MessageParser<Deployable> _parser = new pb::MessageParser<Deployable>(() => new Deployable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deployable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployable(Deployable other) : this() {
      resourceUri_ = other.resourceUri_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployable Clone() {
      return new Deployable(this);
    }

    /// <summary>Field number for the "resource_uri" field.</summary>
    public const int ResourceUriFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_resourceUri_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> resourceUri_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Resource URI for the artifact being deployed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ResourceUri {
      get { return resourceUri_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deployable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deployable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resourceUri_.Equals(other.resourceUri_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= resourceUri_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceUri_.WriteTo(output, _repeated_resourceUri_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceUri_.CalculateSize(_repeated_resourceUri_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deployable other) {
      if (other == null) {
        return;
      }
      resourceUri_.Add(other.resourceUri_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            resourceUri_.AddEntriesFrom(input, _repeated_resourceUri_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Deployable message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The period during which some deployable was active in a runtime.
      /// </summary>
      public sealed partial class Deployment : pb::IMessage<Deployment> {
        private static readonly pb::MessageParser<Deployment> _parser = new pb::MessageParser<Deployment>(() => new Deployment());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Deployment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.Deployable.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deployment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deployment(Deployment other) : this() {
          address_ = other.address_;
          config_ = other.config_.Clone();
          deployTime_ = other.deployTime_;
          undeployTime_ = other.undeployTime_;
          userEmail_ = other.userEmail_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deployment Clone() {
          return new Deployment(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private string address_ = "";
        /// <summary>
        /// Address of the runtime element hosting this deployment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 2;
        private static readonly pbc::MapField<string, string>.Codec _map_config_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
        private readonly pbc::MapField<string, string> config_ = new pbc::MapField<string, string>();
        /// <summary>
        /// Configuration used to create this deployment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Config {
          get { return config_; }
        }

        /// <summary>Field number for the "deploy_time" field.</summary>
        public const int DeployTimeFieldNumber = 3;
        private string deployTime_ = "";
        /// <summary>
        /// Beginning of the lifetime of this deployment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeployTime {
          get { return deployTime_; }
          set {
            deployTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "undeploy_time" field.</summary>
        public const int UndeployTimeFieldNumber = 4;
        private string undeployTime_ = "";
        /// <summary>
        /// End of the lifetime of this deployment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UndeployTime {
          get { return undeployTime_; }
          set {
            undeployTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_email" field.</summary>
        public const int UserEmailFieldNumber = 5;
        private string userEmail_ = "";
        /// <summary>
        /// Identity of the user that triggered this deployment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserEmail {
          get { return userEmail_; }
          set {
            userEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Deployment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Deployment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (!Config.Equals(other.Config)) return false;
          if (DeployTime != other.DeployTime) return false;
          if (UndeployTime != other.UndeployTime) return false;
          if (UserEmail != other.UserEmail) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          hash ^= Config.GetHashCode();
          if (DeployTime.Length != 0) hash ^= DeployTime.GetHashCode();
          if (UndeployTime.Length != 0) hash ^= UndeployTime.GetHashCode();
          if (UserEmail.Length != 0) hash ^= UserEmail.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Address);
          }
          config_.WriteTo(output, _map_config_codec);
          if (DeployTime.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(DeployTime);
          }
          if (UndeployTime.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(UndeployTime);
          }
          if (UserEmail.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(UserEmail);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
          }
          size += config_.CalculateSize(_map_config_codec);
          if (DeployTime.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeployTime);
          }
          if (UndeployTime.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UndeployTime);
          }
          if (UserEmail.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserEmail);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Deployment other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          config_.Add(other.config_);
          if (other.DeployTime.Length != 0) {
            DeployTime = other.DeployTime;
          }
          if (other.UndeployTime.Length != 0) {
            UndeployTime = other.UndeployTime;
          }
          if (other.UserEmail.Length != 0) {
            UserEmail = other.UserEmail;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Address = input.ReadString();
                break;
              }
              case 18: {
                config_.AddEntriesFrom(input, _map_config_codec);
                break;
              }
              case 26: {
                DeployTime = input.ReadString();
                break;
              }
              case 34: {
                UndeployTime = input.ReadString();
                break;
              }
              case 42: {
                UserEmail = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// DockerImage holds types defining base image notes
  /// and derived image occurrences.
  /// </summary>
  public sealed partial class DockerImage : pb::IMessage<DockerImage> {
    private static readonly pb::MessageParser<DockerImage> _parser = new pb::MessageParser<DockerImage>(() => new DockerImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DockerImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockerImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockerImage(DockerImage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockerImage Clone() {
      return new DockerImage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DockerImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DockerImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DockerImage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DockerImage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Instructions from dockerfile
      /// </summary>
      public sealed partial class Layer : pb::IMessage<Layer> {
        private static readonly pb::MessageParser<Layer> _parser = new pb::MessageParser<Layer>(() => new Layer());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Layer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.DockerImage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Layer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Layer(Layer other) : this() {
          arguments_ = other.arguments_;
          directive_ = other.directive_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Layer Clone() {
          return new Layer(this);
        }

        /// <summary>Field number for the "arguments" field.</summary>
        public const int ArgumentsFieldNumber = 1;
        private string arguments_ = "";
        /// <summary>
        /// The recovered arguments to the Dockerfile directive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Arguments {
          get { return arguments_; }
          set {
            arguments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "directive" field.</summary>
        public const int DirectiveFieldNumber = 2;
        private global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer.Types.Directive directive_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer.Types.Directive Directive {
          get { return directive_; }
          set {
            directive_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Layer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Layer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Arguments != other.Arguments) return false;
          if (Directive != other.Directive) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Arguments.Length != 0) hash ^= Arguments.GetHashCode();
          if (Directive != 0) hash ^= Directive.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Arguments.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Arguments);
          }
          if (Directive != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Directive);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Arguments.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Arguments);
          }
          if (Directive != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Directive);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Layer other) {
          if (other == null) {
            return;
          }
          if (other.Arguments.Length != 0) {
            Arguments = other.Arguments;
          }
          if (other.Directive != 0) {
            Directive = other.Directive;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Arguments = input.ReadString();
                break;
              }
              case 16: {
                directive_ = (global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer.Types.Directive) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Layer message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The recovered Dockerfile directive used to construct this layer.
          /// </summary>
          public enum Directive {
            [pbr::OriginalName("UNKNOWN_DIRECTIVE")] UnknownDirective = 0,
            [pbr::OriginalName("MAINTAINER")] Maintainer = 1,
            [pbr::OriginalName("RUN")] Run = 2,
            [pbr::OriginalName("CMD")] Cmd = 3,
            [pbr::OriginalName("LABEL")] Label = 4,
            [pbr::OriginalName("EXPOSE")] Expose = 5,
            [pbr::OriginalName("ENV")] Env = 6,
            [pbr::OriginalName("ADD")] Add = 7,
            [pbr::OriginalName("COPY")] Copy = 8,
            [pbr::OriginalName("ENTRYPOINT")] Entrypoint = 9,
            [pbr::OriginalName("VOLUME")] Volume = 10,
            [pbr::OriginalName("USER")] User = 11,
            [pbr::OriginalName("WORKDIR")] Workdir = 12,
            [pbr::OriginalName("ARG")] Arg = 13,
            [pbr::OriginalName("ONBUILD")] Onbuild = 14,
            [pbr::OriginalName("STOPSIGNAL")] Stopsignal = 15,
            [pbr::OriginalName("HEALTHCHECK")] Healthcheck = 16,
            [pbr::OriginalName("SHELL")] Shell = 17,
          }

        }
        #endregion

      }

      /// <summary>
      /// A set of properties that uniquely identify a given Docker image.
      /// </summary>
      public sealed partial class Fingerprint : pb::IMessage<Fingerprint> {
        private static readonly pb::MessageParser<Fingerprint> _parser = new pb::MessageParser<Fingerprint>(() => new Fingerprint());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fingerprint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.DockerImage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fingerprint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fingerprint(Fingerprint other) : this() {
          v1Name_ = other.v1Name_;
          v2Blob_ = other.v2Blob_.Clone();
          v2Name_ = other.v2Name_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fingerprint Clone() {
          return new Fingerprint(this);
        }

        /// <summary>Field number for the "v1_name" field.</summary>
        public const int V1NameFieldNumber = 1;
        private string v1Name_ = "";
        /// <summary>
        /// The layer-id of the final layer in the Docker image’s v1
        /// representation.
        /// This field can be used as a filter in list requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string V1Name {
          get { return v1Name_; }
          set {
            v1Name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "v2_blob" field.</summary>
        public const int V2BlobFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_v2Blob_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> v2Blob_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// The ordered list of v2 blobs that represent a given image.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> V2Blob {
          get { return v2Blob_; }
        }

        /// <summary>Field number for the "v2_name" field.</summary>
        public const int V2NameFieldNumber = 3;
        private string v2Name_ = "";
        /// <summary>
        /// The name of the image’s v2 blobs computed via:
        ///   [bottom] := v2_blobbottom := sha256(v2_blob[N] + “ ” + v2_name[N+1])
        /// Only the name of the final blob is kept.
        /// This field can be used as a filter in list requests.
        /// @OutputOnly
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string V2Name {
          get { return v2Name_; }
          set {
            v2Name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fingerprint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fingerprint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (V1Name != other.V1Name) return false;
          if(!v2Blob_.Equals(other.v2Blob_)) return false;
          if (V2Name != other.V2Name) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (V1Name.Length != 0) hash ^= V1Name.GetHashCode();
          hash ^= v2Blob_.GetHashCode();
          if (V2Name.Length != 0) hash ^= V2Name.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (V1Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(V1Name);
          }
          v2Blob_.WriteTo(output, _repeated_v2Blob_codec);
          if (V2Name.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(V2Name);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (V1Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(V1Name);
          }
          size += v2Blob_.CalculateSize(_repeated_v2Blob_codec);
          if (V2Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(V2Name);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fingerprint other) {
          if (other == null) {
            return;
          }
          if (other.V1Name.Length != 0) {
            V1Name = other.V1Name;
          }
          v2Blob_.Add(other.v2Blob_);
          if (other.V2Name.Length != 0) {
            V2Name = other.V2Name;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                V1Name = input.ReadString();
                break;
              }
              case 18: {
                v2Blob_.AddEntriesFrom(input, _repeated_v2Blob_codec);
                break;
              }
              case 26: {
                V2Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Basis describes the base image portion (Note) of the DockerImage
      /// relationship.  Linked occurrences are derived from this or an
      /// equivalent image via:
      ///   FROM &lt;Basis.resource_url>
      /// Or an equivalent reference, e.g. a tag of the resource_url.
      /// </summary>
      public sealed partial class Basis : pb::IMessage<Basis> {
        private static readonly pb::MessageParser<Basis> _parser = new pb::MessageParser<Basis>(() => new Basis());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Basis> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.DockerImage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Basis() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Basis(Basis other) : this() {
          Fingerprint = other.fingerprint_ != null ? other.Fingerprint.Clone() : null;
          resourceUrl_ = other.resourceUrl_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Basis Clone() {
          return new Basis(this);
        }

        /// <summary>Field number for the "fingerprint" field.</summary>
        public const int FingerprintFieldNumber = 1;
        private global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint fingerprint_;
        /// <summary>
        /// The fingerprint of the base image
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint Fingerprint {
          get { return fingerprint_; }
          set {
            fingerprint_ = value;
          }
        }

        /// <summary>Field number for the "resource_url" field.</summary>
        public const int ResourceUrlFieldNumber = 2;
        private string resourceUrl_ = "";
        /// <summary>
        /// The resource_url for the resource representing the basis of
        /// associated occurrence images.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ResourceUrl {
          get { return resourceUrl_; }
          set {
            resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Basis);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Basis other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Fingerprint, other.Fingerprint)) return false;
          if (ResourceUrl != other.ResourceUrl) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (fingerprint_ != null) hash ^= Fingerprint.GetHashCode();
          if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (fingerprint_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Fingerprint);
          }
          if (ResourceUrl.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ResourceUrl);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (fingerprint_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fingerprint);
          }
          if (ResourceUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Basis other) {
          if (other == null) {
            return;
          }
          if (other.fingerprint_ != null) {
            if (fingerprint_ == null) {
              fingerprint_ = new global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint();
            }
            Fingerprint.MergeFrom(other.Fingerprint);
          }
          if (other.ResourceUrl.Length != 0) {
            ResourceUrl = other.ResourceUrl;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (fingerprint_ == null) {
                  fingerprint_ = new global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint();
                }
                input.ReadMessage(fingerprint_);
                break;
              }
              case 18: {
                ResourceUrl = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Derived describes the derived image portion (Occurrence) of the
      /// DockerImage relationship.  This image would be produced from a Dockerfile
      /// with FROM &lt;DockerImage.Basis in attached Note>.
      /// </summary>
      public sealed partial class Derived : pb::IMessage<Derived> {
        private static readonly pb::MessageParser<Derived> _parser = new pb::MessageParser<Derived>(() => new Derived());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Derived> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.DockerImage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Derived() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Derived(Derived other) : this() {
          baseResourceUrl_ = other.baseResourceUrl_;
          distance_ = other.distance_;
          Fingerprint = other.fingerprint_ != null ? other.Fingerprint.Clone() : null;
          layerInfo_ = other.layerInfo_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Derived Clone() {
          return new Derived(this);
        }

        /// <summary>Field number for the "base_resource_url" field.</summary>
        public const int BaseResourceUrlFieldNumber = 1;
        private string baseResourceUrl_ = "";
        /// <summary>
        /// This contains the base image url for the derived image Occurrence
        /// @OutputOnly
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BaseResourceUrl {
          get { return baseResourceUrl_; }
          set {
            baseResourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 2;
        private uint distance_;
        /// <summary>
        /// The number of layers by which this image differs from
        /// the associated image basis.
        /// @OutputOnly
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "fingerprint" field.</summary>
        public const int FingerprintFieldNumber = 3;
        private global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint fingerprint_;
        /// <summary>
        /// The fingerprint of the derived image
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint Fingerprint {
          get { return fingerprint_; }
          set {
            fingerprint_ = value;
          }
        }

        /// <summary>Field number for the "layer_info" field.</summary>
        public const int LayerInfoFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer> _repeated_layerInfo_codec
            = pb::FieldCodec.ForMessage(34, global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer.Parser);
        private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer> layerInfo_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer>();
        /// <summary>
        /// This contains layer-specific metadata, if populated it
        /// has length “distance” and is ordered with [distance] being the
        /// layer immediately following the base image and [1]
        /// being the final layer.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.DockerImage.Types.Layer> LayerInfo {
          get { return layerInfo_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Derived);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Derived other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BaseResourceUrl != other.BaseResourceUrl) return false;
          if (Distance != other.Distance) return false;
          if (!object.Equals(Fingerprint, other.Fingerprint)) return false;
          if(!layerInfo_.Equals(other.layerInfo_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BaseResourceUrl.Length != 0) hash ^= BaseResourceUrl.GetHashCode();
          if (Distance != 0) hash ^= Distance.GetHashCode();
          if (fingerprint_ != null) hash ^= Fingerprint.GetHashCode();
          hash ^= layerInfo_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BaseResourceUrl.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(BaseResourceUrl);
          }
          if (Distance != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Distance);
          }
          if (fingerprint_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Fingerprint);
          }
          layerInfo_.WriteTo(output, _repeated_layerInfo_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BaseResourceUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseResourceUrl);
          }
          if (Distance != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
          }
          if (fingerprint_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fingerprint);
          }
          size += layerInfo_.CalculateSize(_repeated_layerInfo_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Derived other) {
          if (other == null) {
            return;
          }
          if (other.BaseResourceUrl.Length != 0) {
            BaseResourceUrl = other.BaseResourceUrl;
          }
          if (other.Distance != 0) {
            Distance = other.Distance;
          }
          if (other.fingerprint_ != null) {
            if (fingerprint_ == null) {
              fingerprint_ = new global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint();
            }
            Fingerprint.MergeFrom(other.Fingerprint);
          }
          layerInfo_.Add(other.layerInfo_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                BaseResourceUrl = input.ReadString();
                break;
              }
              case 16: {
                Distance = input.ReadUInt32();
                break;
              }
              case 26: {
                if (fingerprint_ == null) {
                  fingerprint_ = new global::Grafeas.V1Alpha1.Api.DockerImage.Types.Fingerprint();
                }
                input.ReadMessage(fingerprint_);
                break;
              }
              case 34: {
                layerInfo_.AddEntriesFrom(input, _repeated_layerInfo_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Note that indicates a type of analysis and exists in a provider project to
  /// indicate the status of an analysis on a resource. Absence of an occurrence
  /// linked to this note for a resource indicates that analysis hasn't started.
  /// </summary>
  public sealed partial class Discovery : pb::IMessage<Discovery> {
    private static readonly pb::MessageParser<Discovery> _parser = new pb::MessageParser<Discovery>(() => new Discovery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Discovery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Discovery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Discovery(Discovery other) : this() {
      analysisKind_ = other.analysisKind_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Discovery Clone() {
      return new Discovery(this);
    }

    /// <summary>Field number for the "analysis_kind" field.</summary>
    public const int AnalysisKindFieldNumber = 1;
    private global::Grafeas.V1Alpha1.Api.Note.Types.Kind analysisKind_ = 0;
    /// <summary>
    /// The kind of analysis that is handled by this discovery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Note.Types.Kind AnalysisKind {
      get { return analysisKind_; }
      set {
        analysisKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Discovery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Discovery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnalysisKind != other.AnalysisKind) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnalysisKind != 0) hash ^= AnalysisKind.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnalysisKind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AnalysisKind);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnalysisKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnalysisKind);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Discovery other) {
      if (other == null) {
        return;
      }
      if (other.AnalysisKind != 0) {
        AnalysisKind = other.AnalysisKind;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            analysisKind_ = (global::Grafeas.V1Alpha1.Api.Note.Types.Kind) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Discovery message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Discovered : pb::IMessage<Discovered> {
        private static readonly pb::MessageParser<Discovered> _parser = new pb::MessageParser<Discovered>(() => new Discovered());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Discovered> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.Discovery.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Discovered() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Discovered(Discovered other) : this() {
          Operation = other.operation_ != null ? other.Operation.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Discovered Clone() {
          return new Discovered(this);
        }

        /// <summary>Field number for the "operation" field.</summary>
        public const int OperationFieldNumber = 1;
        private global::Google.LongRunning.Operation operation_;
        /// <summary>
        /// An operation that indicates the status of the current scan.
        /// @OutputOnly
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.LongRunning.Operation Operation {
          get { return operation_; }
          set {
            operation_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Discovered);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Discovered other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Operation, other.Operation)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (operation_ != null) hash ^= Operation.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (operation_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Operation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (operation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Discovered other) {
          if (other == null) {
            return;
          }
          if (other.operation_ != null) {
            if (operation_ == null) {
              operation_ = new global::Google.LongRunning.Operation();
            }
            Operation.MergeFrom(other.Operation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (operation_ == null) {
                  operation_ = new global::Google.LongRunning.Operation();
                }
                input.ReadMessage(operation_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Container message for hashes of byte content of files, used in Source
  /// messages to verify integrity of source input to the build.
  /// </summary>
  public sealed partial class FileHashes : pb::IMessage<FileHashes> {
    private static readonly pb::MessageParser<FileHashes> _parser = new pb::MessageParser<FileHashes>(() => new FileHashes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileHashes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHashes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHashes(FileHashes other) : this() {
      fileHash_ = other.fileHash_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHashes Clone() {
      return new FileHashes(this);
    }

    /// <summary>Field number for the "file_hash" field.</summary>
    public const int FileHashFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.Hash> _repeated_fileHash_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Alpha1.Api.Hash.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Hash> fileHash_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Hash>();
    /// <summary>
    /// Collection of file hashes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Hash> FileHash {
      get { return fileHash_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileHashes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileHashes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fileHash_.Equals(other.fileHash_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fileHash_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fileHash_.WriteTo(output, _repeated_fileHash_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fileHash_.CalculateSize(_repeated_fileHash_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileHashes other) {
      if (other == null) {
        return;
      }
      fileHash_.Add(other.fileHash_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fileHash_.AddEntriesFrom(input, _repeated_fileHash_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Container message for hash values.
  /// </summary>
  public sealed partial class Hash : pb::IMessage<Hash> {
    private static readonly pb::MessageParser<Hash> _parser = new pb::MessageParser<Hash>(() => new Hash());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash(Hash other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash Clone() {
      return new Hash(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Grafeas.V1Alpha1.Api.Hash.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Hash.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// The hash value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hash other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Grafeas.V1Alpha1.Api.Hash.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Hash message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of hash that was performed.
      /// </summary>
      public enum Type {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("SHA256")] Sha256 = 1,
        [pbr::OriginalName("MD5")] Md5 = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Note provides a detailed description of a note using information
  /// from the provider of the note.
  /// </summary>
  public sealed partial class Note : pb::IMessage<Note> {
    private static readonly pb::MessageParser<Note> _parser = new pb::MessageParser<Note>(() => new Note());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Note> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note(Note other) : this() {
      name_ = other.name_;
      shortDescription_ = other.shortDescription_;
      longDescription_ = other.longDescription_;
      kind_ = other.kind_;
      relatedUrl_ = other.relatedUrl_.Clone();
      ExpirationTime = other.expirationTime_ != null ? other.ExpirationTime.Clone() : null;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      UpdateTime = other.updateTime_ != null ? other.UpdateTime.Clone() : null;
      operationName_ = other.operationName_;
      switch (other.NoteTypeCase) {
        case NoteTypeOneofCase.VulnerabilityType:
          VulnerabilityType = other.VulnerabilityType.Clone();
          break;
        case NoteTypeOneofCase.BuildType:
          BuildType = other.BuildType.Clone();
          break;
        case NoteTypeOneofCase.BaseImage:
          BaseImage = other.BaseImage.Clone();
          break;
        case NoteTypeOneofCase.Package:
          Package = other.Package.Clone();
          break;
        case NoteTypeOneofCase.Deployable:
          Deployable = other.Deployable.Clone();
          break;
        case NoteTypeOneofCase.Discovery:
          Discovery = other.Discovery.Clone();
          break;
        case NoteTypeOneofCase.AttestationAuthority:
          AttestationAuthority = other.AttestationAuthority.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note Clone() {
      return new Note(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form
    /// "providers/{provider_id}/notes/{note_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_description" field.</summary>
    public const int ShortDescriptionFieldNumber = 3;
    private string shortDescription_ = "";
    /// <summary>
    /// A one sentence description of this note
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "long_description" field.</summary>
    public const int LongDescriptionFieldNumber = 4;
    private string longDescription_ = "";
    /// <summary>
    /// A detailed description of this note
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongDescription {
      get { return longDescription_; }
      set {
        longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 9;
    private global::Grafeas.V1Alpha1.Api.Note.Types.Kind kind_ = 0;
    /// <summary>
    /// Output only. This explicitly denotes which kind of note is specified. This
    /// field can be used as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Note.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "vulnerability_type" field.</summary>
    public const int VulnerabilityTypeFieldNumber = 6;
    /// <summary>
    /// A package vulnerability type of note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.VulnerabilityType VulnerabilityType {
      get { return noteTypeCase_ == NoteTypeOneofCase.VulnerabilityType ? (global::Grafeas.V1Alpha1.Api.VulnerabilityType) noteType_ : null; }
      set {
        noteType_ = value;
        noteTypeCase_ = value == null ? NoteTypeOneofCase.None : NoteTypeOneofCase.VulnerabilityType;
      }
    }

    /// <summary>Field number for the "build_type" field.</summary>
    public const int BuildTypeFieldNumber = 8;
    /// <summary>
    /// Build provenance type for a verifiable build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.BuildType BuildType {
      get { return noteTypeCase_ == NoteTypeOneofCase.BuildType ? (global::Grafeas.V1Alpha1.Api.BuildType) noteType_ : null; }
      set {
        noteType_ = value;
        noteTypeCase_ = value == null ? NoteTypeOneofCase.None : NoteTypeOneofCase.BuildType;
      }
    }

    /// <summary>Field number for the "base_image" field.</summary>
    public const int BaseImageFieldNumber = 13;
    /// <summary>
    /// A note describing a base image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.DockerImage.Types.Basis BaseImage {
      get { return noteTypeCase_ == NoteTypeOneofCase.BaseImage ? (global::Grafeas.V1Alpha1.Api.DockerImage.Types.Basis) noteType_ : null; }
      set {
        noteType_ = value;
        noteTypeCase_ = value == null ? NoteTypeOneofCase.None : NoteTypeOneofCase.BaseImage;
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 14;
    /// <summary>
    /// A note describing a package hosted by various package managers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.PackageManager.Types.Package Package {
      get { return noteTypeCase_ == NoteTypeOneofCase.Package ? (global::Grafeas.V1Alpha1.Api.PackageManager.Types.Package) noteType_ : null; }
      set {
        noteType_ = value;
        noteTypeCase_ = value == null ? NoteTypeOneofCase.None : NoteTypeOneofCase.Package;
      }
    }

    /// <summary>Field number for the "deployable" field.</summary>
    public const int DeployableFieldNumber = 17;
    /// <summary>
    /// A note describing something that can be deployed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Deployable Deployable {
      get { return noteTypeCase_ == NoteTypeOneofCase.Deployable ? (global::Grafeas.V1Alpha1.Api.Deployable) noteType_ : null; }
      set {
        noteType_ = value;
        noteTypeCase_ = value == null ? NoteTypeOneofCase.None : NoteTypeOneofCase.Deployable;
      }
    }

    /// <summary>Field number for the "discovery" field.</summary>
    public const int DiscoveryFieldNumber = 18;
    /// <summary>
    /// A note describing a provider/analysis type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Discovery Discovery {
      get { return noteTypeCase_ == NoteTypeOneofCase.Discovery ? (global::Grafeas.V1Alpha1.Api.Discovery) noteType_ : null; }
      set {
        noteType_ = value;
        noteTypeCase_ = value == null ? NoteTypeOneofCase.None : NoteTypeOneofCase.Discovery;
      }
    }

    /// <summary>Field number for the "attestation_authority" field.</summary>
    public const int AttestationAuthorityFieldNumber = 19;
    /// <summary>
    /// A note describing an attestation role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.AttestationAuthority AttestationAuthority {
      get { return noteTypeCase_ == NoteTypeOneofCase.AttestationAuthority ? (global::Grafeas.V1Alpha1.Api.AttestationAuthority) noteType_ : null; }
      set {
        noteType_ = value;
        noteTypeCase_ = value == null ? NoteTypeOneofCase.None : NoteTypeOneofCase.AttestationAuthority;
      }
    }

    /// <summary>Field number for the "related_url" field.</summary>
    public const int RelatedUrlFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.Note.Types.RelatedUrl> _repeated_relatedUrl_codec
        = pb::FieldCodec.ForMessage(58, global::Grafeas.V1Alpha1.Api.Note.Types.RelatedUrl.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Note.Types.RelatedUrl> relatedUrl_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Note.Types.RelatedUrl>();
    /// <summary>
    /// Urls associated with this note
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.Note.Types.RelatedUrl> RelatedUrl {
      get { return relatedUrl_; }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationTime_;
    /// <summary>
    /// Time of expiration for this note, null if note currently does not expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time this note was created. This field can be used as a
    /// filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. The time this note was last updated. This field can be used as
    /// a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "operation_name" field.</summary>
    public const int OperationNameFieldNumber = 15;
    private string operationName_ = "";
    /// <summary>
    /// The name of the operation that created this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object noteType_;
    /// <summary>Enum of possible cases for the "note_type" oneof.</summary>
    public enum NoteTypeOneofCase {
      None = 0,
      VulnerabilityType = 6,
      BuildType = 8,
      BaseImage = 13,
      Package = 14,
      Deployable = 17,
      Discovery = 18,
      AttestationAuthority = 19,
    }
    private NoteTypeOneofCase noteTypeCase_ = NoteTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoteTypeOneofCase NoteTypeCase {
      get { return noteTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNoteType() {
      noteTypeCase_ = NoteTypeOneofCase.None;
      noteType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Note);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Note other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (LongDescription != other.LongDescription) return false;
      if (Kind != other.Kind) return false;
      if (!object.Equals(VulnerabilityType, other.VulnerabilityType)) return false;
      if (!object.Equals(BuildType, other.BuildType)) return false;
      if (!object.Equals(BaseImage, other.BaseImage)) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (!object.Equals(Deployable, other.Deployable)) return false;
      if (!object.Equals(Discovery, other.Discovery)) return false;
      if (!object.Equals(AttestationAuthority, other.AttestationAuthority)) return false;
      if(!relatedUrl_.Equals(other.relatedUrl_)) return false;
      if (!object.Equals(ExpirationTime, other.ExpirationTime)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (OperationName != other.OperationName) return false;
      if (NoteTypeCase != other.NoteTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (noteTypeCase_ == NoteTypeOneofCase.VulnerabilityType) hash ^= VulnerabilityType.GetHashCode();
      if (noteTypeCase_ == NoteTypeOneofCase.BuildType) hash ^= BuildType.GetHashCode();
      if (noteTypeCase_ == NoteTypeOneofCase.BaseImage) hash ^= BaseImage.GetHashCode();
      if (noteTypeCase_ == NoteTypeOneofCase.Package) hash ^= Package.GetHashCode();
      if (noteTypeCase_ == NoteTypeOneofCase.Deployable) hash ^= Deployable.GetHashCode();
      if (noteTypeCase_ == NoteTypeOneofCase.Discovery) hash ^= Discovery.GetHashCode();
      if (noteTypeCase_ == NoteTypeOneofCase.AttestationAuthority) hash ^= AttestationAuthority.GetHashCode();
      hash ^= relatedUrl_.GetHashCode();
      if (expirationTime_ != null) hash ^= ExpirationTime.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      hash ^= (int) noteTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LongDescription);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.VulnerabilityType) {
        output.WriteRawTag(50);
        output.WriteMessage(VulnerabilityType);
      }
      relatedUrl_.WriteTo(output, _repeated_relatedUrl_codec);
      if (noteTypeCase_ == NoteTypeOneofCase.BuildType) {
        output.WriteRawTag(66);
        output.WriteMessage(BuildType);
      }
      if (Kind != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Kind);
      }
      if (expirationTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ExpirationTime);
      }
      if (createTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(UpdateTime);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.BaseImage) {
        output.WriteRawTag(106);
        output.WriteMessage(BaseImage);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.Package) {
        output.WriteRawTag(114);
        output.WriteMessage(Package);
      }
      if (OperationName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(OperationName);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.Deployable) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Deployable);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.Discovery) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Discovery);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.AttestationAuthority) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(AttestationAuthority);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.VulnerabilityType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VulnerabilityType);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.BuildType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildType);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.BaseImage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseImage);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.Package) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.Deployable) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Deployable);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.Discovery) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Discovery);
      }
      if (noteTypeCase_ == NoteTypeOneofCase.AttestationAuthority) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttestationAuthority);
      }
      size += relatedUrl_.CalculateSize(_repeated_relatedUrl_codec);
      if (expirationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpirationTime);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Note other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.LongDescription.Length != 0) {
        LongDescription = other.LongDescription;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      relatedUrl_.Add(other.relatedUrl_);
      if (other.expirationTime_ != null) {
        if (expirationTime_ == null) {
          expirationTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationTime.MergeFrom(other.ExpirationTime);
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      switch (other.NoteTypeCase) {
        case NoteTypeOneofCase.VulnerabilityType:
          VulnerabilityType = other.VulnerabilityType;
          break;
        case NoteTypeOneofCase.BuildType:
          BuildType = other.BuildType;
          break;
        case NoteTypeOneofCase.BaseImage:
          BaseImage = other.BaseImage;
          break;
        case NoteTypeOneofCase.Package:
          Package = other.Package;
          break;
        case NoteTypeOneofCase.Deployable:
          Deployable = other.Deployable;
          break;
        case NoteTypeOneofCase.Discovery:
          Discovery = other.Discovery;
          break;
        case NoteTypeOneofCase.AttestationAuthority:
          AttestationAuthority = other.AttestationAuthority;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ShortDescription = input.ReadString();
            break;
          }
          case 34: {
            LongDescription = input.ReadString();
            break;
          }
          case 50: {
            global::Grafeas.V1Alpha1.Api.VulnerabilityType subBuilder = new global::Grafeas.V1Alpha1.Api.VulnerabilityType();
            if (noteTypeCase_ == NoteTypeOneofCase.VulnerabilityType) {
              subBuilder.MergeFrom(VulnerabilityType);
            }
            input.ReadMessage(subBuilder);
            VulnerabilityType = subBuilder;
            break;
          }
          case 58: {
            relatedUrl_.AddEntriesFrom(input, _repeated_relatedUrl_codec);
            break;
          }
          case 66: {
            global::Grafeas.V1Alpha1.Api.BuildType subBuilder = new global::Grafeas.V1Alpha1.Api.BuildType();
            if (noteTypeCase_ == NoteTypeOneofCase.BuildType) {
              subBuilder.MergeFrom(BuildType);
            }
            input.ReadMessage(subBuilder);
            BuildType = subBuilder;
            break;
          }
          case 72: {
            kind_ = (global::Grafeas.V1Alpha1.Api.Note.Types.Kind) input.ReadEnum();
            break;
          }
          case 82: {
            if (expirationTime_ == null) {
              expirationTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(expirationTime_);
            break;
          }
          case 90: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 98: {
            if (updateTime_ == null) {
              updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(updateTime_);
            break;
          }
          case 106: {
            global::Grafeas.V1Alpha1.Api.DockerImage.Types.Basis subBuilder = new global::Grafeas.V1Alpha1.Api.DockerImage.Types.Basis();
            if (noteTypeCase_ == NoteTypeOneofCase.BaseImage) {
              subBuilder.MergeFrom(BaseImage);
            }
            input.ReadMessage(subBuilder);
            BaseImage = subBuilder;
            break;
          }
          case 114: {
            global::Grafeas.V1Alpha1.Api.PackageManager.Types.Package subBuilder = new global::Grafeas.V1Alpha1.Api.PackageManager.Types.Package();
            if (noteTypeCase_ == NoteTypeOneofCase.Package) {
              subBuilder.MergeFrom(Package);
            }
            input.ReadMessage(subBuilder);
            Package = subBuilder;
            break;
          }
          case 122: {
            OperationName = input.ReadString();
            break;
          }
          case 138: {
            global::Grafeas.V1Alpha1.Api.Deployable subBuilder = new global::Grafeas.V1Alpha1.Api.Deployable();
            if (noteTypeCase_ == NoteTypeOneofCase.Deployable) {
              subBuilder.MergeFrom(Deployable);
            }
            input.ReadMessage(subBuilder);
            Deployable = subBuilder;
            break;
          }
          case 146: {
            global::Grafeas.V1Alpha1.Api.Discovery subBuilder = new global::Grafeas.V1Alpha1.Api.Discovery();
            if (noteTypeCase_ == NoteTypeOneofCase.Discovery) {
              subBuilder.MergeFrom(Discovery);
            }
            input.ReadMessage(subBuilder);
            Discovery = subBuilder;
            break;
          }
          case 154: {
            global::Grafeas.V1Alpha1.Api.AttestationAuthority subBuilder = new global::Grafeas.V1Alpha1.Api.AttestationAuthority();
            if (noteTypeCase_ == NoteTypeOneofCase.AttestationAuthority) {
              subBuilder.MergeFrom(AttestationAuthority);
            }
            input.ReadMessage(subBuilder);
            AttestationAuthority = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Note message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// This must be 1:1 with members of our oneofs, it can be used for filtering
      /// Note and Occurrence on their kind.
      /// </summary>
      public enum Kind {
        /// <summary>
        /// Unknown
        /// </summary>
        [pbr::OriginalName("KIND_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The note and occurrence represent a package vulnerability.
        /// </summary>
        [pbr::OriginalName("PACKAGE_VULNERABILITY")] PackageVulnerability = 1,
        /// <summary>
        /// The note and occurrence assert build provenance.
        /// </summary>
        [pbr::OriginalName("BUILD_DETAILS")] BuildDetails = 2,
        /// <summary>
        /// This represents an image basis relationship.
        /// </summary>
        [pbr::OriginalName("IMAGE_BASIS")] ImageBasis = 3,
        /// <summary>
        /// This represents a package installed via a package manager.
        /// </summary>
        [pbr::OriginalName("PACKAGE_MANAGER")] PackageManager = 4,
        /// <summary>
        /// The note and occurrence track deployment events.
        /// </summary>
        [pbr::OriginalName("DEPLOYABLE")] Deployable = 5,
        /// <summary>
        /// The note and occurrence track the initial discovery status of a resource.
        /// </summary>
        [pbr::OriginalName("DISCOVERY")] Discovery = 6,
        /// <summary>
        /// This represents a logical "role" that can attest to artifacts.
        /// </summary>
        [pbr::OriginalName("ATTESTATION_AUTHORITY")] AttestationAuthority = 7,
      }

      /// <summary>
      /// Metadata for any related url information
      /// </summary>
      public sealed partial class RelatedUrl : pb::IMessage<RelatedUrl> {
        private static readonly pb::MessageParser<RelatedUrl> _parser = new pb::MessageParser<RelatedUrl>(() => new RelatedUrl());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RelatedUrl> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.Note.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RelatedUrl() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RelatedUrl(RelatedUrl other) : this() {
          url_ = other.url_;
          label_ = other.label_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RelatedUrl Clone() {
          return new RelatedUrl(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        /// <summary>
        /// Specific url to associate with the note
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "label" field.</summary>
        public const int LabelFieldNumber = 2;
        private string label_ = "";
        /// <summary>
        /// Label to describe usage of the url
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Label {
          get { return label_; }
          set {
            label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RelatedUrl);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RelatedUrl other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (Label != other.Label) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (Label.Length != 0) hash ^= Label.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (Label.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Label);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (Label.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RelatedUrl other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          if (other.Label.Length != 0) {
            Label = other.Label;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                Label = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Occurrence includes information about analysis occurrences for an image.
  /// </summary>
  public sealed partial class Occurrence : pb::IMessage<Occurrence> {
    private static readonly pb::MessageParser<Occurrence> _parser = new pb::MessageParser<Occurrence>(() => new Occurrence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Occurrence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence(Occurrence other) : this() {
      name_ = other.name_;
      resourceUrl_ = other.resourceUrl_;
      noteName_ = other.noteName_;
      kind_ = other.kind_;
      remediation_ = other.remediation_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      UpdateTime = other.updateTime_ != null ? other.UpdateTime.Clone() : null;
      operationName_ = other.operationName_;
      switch (other.DetailsCase) {
        case DetailsOneofCase.VulnerabilityDetails:
          VulnerabilityDetails = other.VulnerabilityDetails.Clone();
          break;
        case DetailsOneofCase.BuildDetails:
          BuildDetails = other.BuildDetails.Clone();
          break;
        case DetailsOneofCase.DerivedImage:
          DerivedImage = other.DerivedImage.Clone();
          break;
        case DetailsOneofCase.Installation:
          Installation = other.Installation.Clone();
          break;
        case DetailsOneofCase.Deployment:
          Deployment = other.Deployment.Clone();
          break;
        case DetailsOneofCase.Discovered:
          Discovered = other.Discovered.Clone();
          break;
        case DetailsOneofCase.Attestation:
          Attestation = other.Attestation.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence Clone() {
      return new Occurrence(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. The name of the occurrence in the form
    /// "projects/{project_id}/occurrences/{occurrence_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 2;
    private string resourceUrl_ = "";
    /// <summary>
    /// The unique url of the image or container for which the occurrence applies.
    /// Example: https://gcr.io/project/image@sha256:foo
    /// This field can be used as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note_name" field.</summary>
    public const int NoteNameFieldNumber = 3;
    private string noteName_ = "";
    /// <summary>
    /// An analysis note associated with this image, in the form
    /// "providers/{provider_id}/notes/{note_id}"
    /// This field can be used as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteName {
      get { return noteName_; }
      set {
        noteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 6;
    private global::Grafeas.V1Alpha1.Api.Note.Types.Kind kind_ = 0;
    /// <summary>
    /// Output only. This explicitly denotes which of the occurrence details is
    /// specified. This field can be used as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Note.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "vulnerability_details" field.</summary>
    public const int VulnerabilityDetailsFieldNumber = 8;
    /// <summary>
    /// Details of a security vulnerability note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityDetails VulnerabilityDetails {
      get { return detailsCase_ == DetailsOneofCase.VulnerabilityDetails ? (global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityDetails) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.VulnerabilityDetails;
      }
    }

    /// <summary>Field number for the "build_details" field.</summary>
    public const int BuildDetailsFieldNumber = 7;
    /// <summary>
    /// Build details for a verifiable build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.BuildDetails BuildDetails {
      get { return detailsCase_ == DetailsOneofCase.BuildDetails ? (global::Grafeas.V1Alpha1.Api.BuildDetails) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.BuildDetails;
      }
    }

    /// <summary>Field number for the "derived_image" field.</summary>
    public const int DerivedImageFieldNumber = 11;
    /// <summary>
    /// Describes how this resource derives from the basis
    /// in the associated note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.DockerImage.Types.Derived DerivedImage {
      get { return detailsCase_ == DetailsOneofCase.DerivedImage ? (global::Grafeas.V1Alpha1.Api.DockerImage.Types.Derived) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.DerivedImage;
      }
    }

    /// <summary>Field number for the "installation" field.</summary>
    public const int InstallationFieldNumber = 12;
    /// <summary>
    /// Describes the installation of a package on the linked resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.PackageManager.Types.Installation Installation {
      get { return detailsCase_ == DetailsOneofCase.Installation ? (global::Grafeas.V1Alpha1.Api.PackageManager.Types.Installation) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Installation;
      }
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 14;
    /// <summary>
    /// Describes the deployment of an artifact on a runtime.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Deployable.Types.Deployment Deployment {
      get { return detailsCase_ == DetailsOneofCase.Deployment ? (global::Grafeas.V1Alpha1.Api.Deployable.Types.Deployment) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Deployment;
      }
    }

    /// <summary>Field number for the "discovered" field.</summary>
    public const int DiscoveredFieldNumber = 15;
    /// <summary>
    /// Describes the initial scan status for this resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.Discovery.Types.Discovered Discovered {
      get { return detailsCase_ == DetailsOneofCase.Discovered ? (global::Grafeas.V1Alpha1.Api.Discovery.Types.Discovered) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Discovered;
      }
    }

    /// <summary>Field number for the "attestation" field.</summary>
    public const int AttestationFieldNumber = 16;
    /// <summary>
    /// Describes an attestation of an artifact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.Attestation Attestation {
      get { return detailsCase_ == DetailsOneofCase.Attestation ? (global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.Attestation) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Attestation;
      }
    }

    /// <summary>Field number for the "remediation" field.</summary>
    public const int RemediationFieldNumber = 5;
    private string remediation_ = "";
    /// <summary>
    /// A description of actions that can be taken to remedy the note
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remediation {
      get { return remediation_; }
      set {
        remediation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time this occurrence was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. The time this occurrence was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "operation_name" field.</summary>
    public const int OperationNameFieldNumber = 13;
    private string operationName_ = "";
    /// <summary>
    /// The name of the operation that created this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object details_;
    /// <summary>Enum of possible cases for the "details" oneof.</summary>
    public enum DetailsOneofCase {
      None = 0,
      VulnerabilityDetails = 8,
      BuildDetails = 7,
      DerivedImage = 11,
      Installation = 12,
      Deployment = 14,
      Discovered = 15,
      Attestation = 16,
    }
    private DetailsOneofCase detailsCase_ = DetailsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsOneofCase DetailsCase {
      get { return detailsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetails() {
      detailsCase_ = DetailsOneofCase.None;
      details_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Occurrence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Occurrence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (NoteName != other.NoteName) return false;
      if (Kind != other.Kind) return false;
      if (!object.Equals(VulnerabilityDetails, other.VulnerabilityDetails)) return false;
      if (!object.Equals(BuildDetails, other.BuildDetails)) return false;
      if (!object.Equals(DerivedImage, other.DerivedImage)) return false;
      if (!object.Equals(Installation, other.Installation)) return false;
      if (!object.Equals(Deployment, other.Deployment)) return false;
      if (!object.Equals(Discovered, other.Discovered)) return false;
      if (!object.Equals(Attestation, other.Attestation)) return false;
      if (Remediation != other.Remediation) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (OperationName != other.OperationName) return false;
      if (DetailsCase != other.DetailsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (NoteName.Length != 0) hash ^= NoteName.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.VulnerabilityDetails) hash ^= VulnerabilityDetails.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.BuildDetails) hash ^= BuildDetails.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.DerivedImage) hash ^= DerivedImage.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Installation) hash ^= Installation.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Deployment) hash ^= Deployment.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Discovered) hash ^= Discovered.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Attestation) hash ^= Attestation.GetHashCode();
      if (Remediation.Length != 0) hash ^= Remediation.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      hash ^= (int) detailsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceUrl);
      }
      if (NoteName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NoteName);
      }
      if (Remediation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Remediation);
      }
      if (Kind != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Kind);
      }
      if (detailsCase_ == DetailsOneofCase.BuildDetails) {
        output.WriteRawTag(58);
        output.WriteMessage(BuildDetails);
      }
      if (detailsCase_ == DetailsOneofCase.VulnerabilityDetails) {
        output.WriteRawTag(66);
        output.WriteMessage(VulnerabilityDetails);
      }
      if (createTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateTime);
      }
      if (detailsCase_ == DetailsOneofCase.DerivedImage) {
        output.WriteRawTag(90);
        output.WriteMessage(DerivedImage);
      }
      if (detailsCase_ == DetailsOneofCase.Installation) {
        output.WriteRawTag(98);
        output.WriteMessage(Installation);
      }
      if (OperationName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(OperationName);
      }
      if (detailsCase_ == DetailsOneofCase.Deployment) {
        output.WriteRawTag(114);
        output.WriteMessage(Deployment);
      }
      if (detailsCase_ == DetailsOneofCase.Discovered) {
        output.WriteRawTag(122);
        output.WriteMessage(Discovered);
      }
      if (detailsCase_ == DetailsOneofCase.Attestation) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Attestation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (NoteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteName);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (detailsCase_ == DetailsOneofCase.VulnerabilityDetails) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VulnerabilityDetails);
      }
      if (detailsCase_ == DetailsOneofCase.BuildDetails) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildDetails);
      }
      if (detailsCase_ == DetailsOneofCase.DerivedImage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DerivedImage);
      }
      if (detailsCase_ == DetailsOneofCase.Installation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Installation);
      }
      if (detailsCase_ == DetailsOneofCase.Deployment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      if (detailsCase_ == DetailsOneofCase.Discovered) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Discovered);
      }
      if (detailsCase_ == DetailsOneofCase.Attestation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Attestation);
      }
      if (Remediation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remediation);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Occurrence other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.NoteName.Length != 0) {
        NoteName = other.NoteName;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Remediation.Length != 0) {
        Remediation = other.Remediation;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      switch (other.DetailsCase) {
        case DetailsOneofCase.VulnerabilityDetails:
          VulnerabilityDetails = other.VulnerabilityDetails;
          break;
        case DetailsOneofCase.BuildDetails:
          BuildDetails = other.BuildDetails;
          break;
        case DetailsOneofCase.DerivedImage:
          DerivedImage = other.DerivedImage;
          break;
        case DetailsOneofCase.Installation:
          Installation = other.Installation;
          break;
        case DetailsOneofCase.Deployment:
          Deployment = other.Deployment;
          break;
        case DetailsOneofCase.Discovered:
          Discovered = other.Discovered;
          break;
        case DetailsOneofCase.Attestation:
          Attestation = other.Attestation;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 26: {
            NoteName = input.ReadString();
            break;
          }
          case 42: {
            Remediation = input.ReadString();
            break;
          }
          case 48: {
            kind_ = (global::Grafeas.V1Alpha1.Api.Note.Types.Kind) input.ReadEnum();
            break;
          }
          case 58: {
            global::Grafeas.V1Alpha1.Api.BuildDetails subBuilder = new global::Grafeas.V1Alpha1.Api.BuildDetails();
            if (detailsCase_ == DetailsOneofCase.BuildDetails) {
              subBuilder.MergeFrom(BuildDetails);
            }
            input.ReadMessage(subBuilder);
            BuildDetails = subBuilder;
            break;
          }
          case 66: {
            global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityDetails subBuilder = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityDetails();
            if (detailsCase_ == DetailsOneofCase.VulnerabilityDetails) {
              subBuilder.MergeFrom(VulnerabilityDetails);
            }
            input.ReadMessage(subBuilder);
            VulnerabilityDetails = subBuilder;
            break;
          }
          case 74: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 82: {
            if (updateTime_ == null) {
              updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(updateTime_);
            break;
          }
          case 90: {
            global::Grafeas.V1Alpha1.Api.DockerImage.Types.Derived subBuilder = new global::Grafeas.V1Alpha1.Api.DockerImage.Types.Derived();
            if (detailsCase_ == DetailsOneofCase.DerivedImage) {
              subBuilder.MergeFrom(DerivedImage);
            }
            input.ReadMessage(subBuilder);
            DerivedImage = subBuilder;
            break;
          }
          case 98: {
            global::Grafeas.V1Alpha1.Api.PackageManager.Types.Installation subBuilder = new global::Grafeas.V1Alpha1.Api.PackageManager.Types.Installation();
            if (detailsCase_ == DetailsOneofCase.Installation) {
              subBuilder.MergeFrom(Installation);
            }
            input.ReadMessage(subBuilder);
            Installation = subBuilder;
            break;
          }
          case 106: {
            OperationName = input.ReadString();
            break;
          }
          case 114: {
            global::Grafeas.V1Alpha1.Api.Deployable.Types.Deployment subBuilder = new global::Grafeas.V1Alpha1.Api.Deployable.Types.Deployment();
            if (detailsCase_ == DetailsOneofCase.Deployment) {
              subBuilder.MergeFrom(Deployment);
            }
            input.ReadMessage(subBuilder);
            Deployment = subBuilder;
            break;
          }
          case 122: {
            global::Grafeas.V1Alpha1.Api.Discovery.Types.Discovered subBuilder = new global::Grafeas.V1Alpha1.Api.Discovery.Types.Discovered();
            if (detailsCase_ == DetailsOneofCase.Discovered) {
              subBuilder.MergeFrom(Discovered);
            }
            input.ReadMessage(subBuilder);
            Discovered = subBuilder;
            break;
          }
          case 130: {
            global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.Attestation subBuilder = new global::Grafeas.V1Alpha1.Api.AttestationAuthority.Types.Attestation();
            if (detailsCase_ == DetailsOneofCase.Attestation) {
              subBuilder.MergeFrom(Attestation);
            }
            input.ReadMessage(subBuilder);
            Attestation = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PackageManager provides metadata about available / installed packages.
  /// </summary>
  public sealed partial class PackageManager : pb::IMessage<PackageManager> {
    private static readonly pb::MessageParser<PackageManager> _parser = new pb::MessageParser<PackageManager>(() => new PackageManager());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageManager> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageManager() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageManager(PackageManager other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageManager Clone() {
      return new PackageManager(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageManager);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageManager other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageManager other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PackageManager message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// This represents a particular package that is distributed over
      /// various channels.
      /// e.g. glibc (aka libc6) is distributed by many, at various versions.
      /// </summary>
      public sealed partial class Package : pb::IMessage<Package> {
        private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Package> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.PackageManager.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Package() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Package(Package other) : this() {
          distribution_ = other.distribution_.Clone();
          name_ = other.name_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Package Clone() {
          return new Package(this);
        }

        /// <summary>Field number for the "distribution" field.</summary>
        public const int DistributionFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution> _repeated_distribution_codec
            = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution.Parser);
        private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution> distribution_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution>();
        /// <summary>
        /// The various channels by which a package is distributed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution> Distribution {
          get { return distribution_; }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// The name of the package.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Package);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Package other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!distribution_.Equals(other.distribution_)) return false;
          if (Name != other.Name) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= distribution_.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          distribution_.WriteTo(output, _repeated_distribution_codec);
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += distribution_.CalculateSize(_repeated_distribution_codec);
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Package other) {
          if (other == null) {
            return;
          }
          distribution_.Add(other.distribution_);
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                distribution_.AddEntriesFrom(input, _repeated_distribution_codec);
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// This represents a particular channel of distribution for a given package.
      /// e.g. Debian's jessie-backports dpkg mirror
      /// </summary>
      public sealed partial class Distribution : pb::IMessage<Distribution> {
        private static readonly pb::MessageParser<Distribution> _parser = new pb::MessageParser<Distribution>(() => new Distribution());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Distribution> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.PackageManager.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Distribution() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Distribution(Distribution other) : this() {
          architecture_ = other.architecture_;
          cpeUri_ = other.cpeUri_;
          description_ = other.description_;
          LatestVersion = other.latestVersion_ != null ? other.LatestVersion.Clone() : null;
          maintainer_ = other.maintainer_;
          url_ = other.url_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Distribution Clone() {
          return new Distribution(this);
        }

        /// <summary>Field number for the "architecture" field.</summary>
        public const int ArchitectureFieldNumber = 1;
        private global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution.Types.Architecture architecture_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution.Types.Architecture Architecture {
          get { return architecture_; }
          set {
            architecture_ = value;
          }
        }

        /// <summary>Field number for the "cpe_uri" field.</summary>
        public const int CpeUriFieldNumber = 2;
        private string cpeUri_ = "";
        /// <summary>
        /// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
        /// denoting the package manager version distributing a package.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CpeUri {
          get { return cpeUri_; }
          set {
            cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 3;
        private string description_ = "";
        /// <summary>
        /// The distribution channel-specific description of this package.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "latest_version" field.</summary>
        public const int LatestVersionFieldNumber = 4;
        private global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version latestVersion_;
        /// <summary>
        /// The latest available version of this package in
        /// this distribution channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version LatestVersion {
          get { return latestVersion_; }
          set {
            latestVersion_ = value;
          }
        }

        /// <summary>Field number for the "maintainer" field.</summary>
        public const int MaintainerFieldNumber = 5;
        private string maintainer_ = "";
        /// <summary>
        /// A freeform string denoting the maintainer of this package.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Maintainer {
          get { return maintainer_; }
          set {
            maintainer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 6;
        private string url_ = "";
        /// <summary>
        /// The distribution channel-specific homepage for this package.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Distribution);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Distribution other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Architecture != other.Architecture) return false;
          if (CpeUri != other.CpeUri) return false;
          if (Description != other.Description) return false;
          if (!object.Equals(LatestVersion, other.LatestVersion)) return false;
          if (Maintainer != other.Maintainer) return false;
          if (Url != other.Url) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Architecture != 0) hash ^= Architecture.GetHashCode();
          if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (latestVersion_ != null) hash ^= LatestVersion.GetHashCode();
          if (Maintainer.Length != 0) hash ^= Maintainer.GetHashCode();
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Architecture != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Architecture);
          }
          if (CpeUri.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CpeUri);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Description);
          }
          if (latestVersion_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(LatestVersion);
          }
          if (Maintainer.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Maintainer);
          }
          if (Url.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Url);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Architecture != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Architecture);
          }
          if (CpeUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (latestVersion_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatestVersion);
          }
          if (Maintainer.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Maintainer);
          }
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Distribution other) {
          if (other == null) {
            return;
          }
          if (other.Architecture != 0) {
            Architecture = other.Architecture;
          }
          if (other.CpeUri.Length != 0) {
            CpeUri = other.CpeUri;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.latestVersion_ != null) {
            if (latestVersion_ == null) {
              latestVersion_ = new global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version();
            }
            LatestVersion.MergeFrom(other.LatestVersion);
          }
          if (other.Maintainer.Length != 0) {
            Maintainer = other.Maintainer;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                architecture_ = (global::Grafeas.V1Alpha1.Api.PackageManager.Types.Distribution.Types.Architecture) input.ReadEnum();
                break;
              }
              case 18: {
                CpeUri = input.ReadString();
                break;
              }
              case 26: {
                Description = input.ReadString();
                break;
              }
              case 34: {
                if (latestVersion_ == null) {
                  latestVersion_ = new global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version();
                }
                input.ReadMessage(latestVersion_);
                break;
              }
              case 42: {
                Maintainer = input.ReadString();
                break;
              }
              case 50: {
                Url = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Distribution message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The CPU architecture for which packages in this distribution
          /// channel were built
          /// </summary>
          public enum Architecture {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("X86")] X86 = 1,
            [pbr::OriginalName("X64")] X64 = 2,
          }

        }
        #endregion

      }

      /// <summary>
      /// Version contains structured information about the version of the package.
      /// For a discussion of this in Debian/Ubuntu:
      /// http://serverfault.com/questions/604541/debian-packages-version-convention
      /// For a discussion of this in Redhat/Fedora/Centos:
      /// http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
      /// </summary>
      public sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.PackageManager.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          epoch_ = other.epoch_;
          name_ = other.name_;
          revision_ = other.revision_;
          kind_ = other.kind_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "epoch" field.</summary>
        public const int EpochFieldNumber = 1;
        private int epoch_;
        /// <summary>
        /// Used to correct mistakes in the version numbering scheme.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Epoch {
          get { return epoch_; }
          set {
            epoch_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// The main part of the version name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "revision" field.</summary>
        public const int RevisionFieldNumber = 3;
        private string revision_ = "";
        /// <summary>
        /// The iteration of the package build from the above version.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Revision {
          get { return revision_; }
          set {
            revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 5;
        private global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version.Types.VersionKind kind_ = 0;
        /// <summary>
        /// Distinguish between sentinel MIN/MAX versions and normal versions.
        /// If kind is not NORMAL, then the other fields are ignored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version.Types.VersionKind Kind {
          get { return kind_; }
          set {
            kind_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Epoch != other.Epoch) return false;
          if (Name != other.Name) return false;
          if (Revision != other.Revision) return false;
          if (Kind != other.Kind) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Epoch != 0) hash ^= Epoch.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Revision.Length != 0) hash ^= Revision.GetHashCode();
          if (Kind != 0) hash ^= Kind.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Epoch != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Epoch);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Revision.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Revision);
          }
          if (Kind != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Kind);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Epoch != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Epoch);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Revision.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Revision);
          }
          if (Kind != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.Epoch != 0) {
            Epoch = other.Epoch;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Revision.Length != 0) {
            Revision = other.Revision;
          }
          if (other.Kind != 0) {
            Kind = other.Kind;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Epoch = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Revision = input.ReadString();
                break;
              }
              case 40: {
                kind_ = (global::Grafeas.V1Alpha1.Api.PackageManager.Types.Version.Types.VersionKind) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Version message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Whether this is an ordinary package version or a
          /// sentinel MIN/MAX version.
          /// </summary>
          public enum VersionKind {
            /// <summary>
            /// A standard package version, defined by the other fields.
            /// </summary>
            [pbr::OriginalName("NORMAL")] Normal = 0,
            /// <summary>
            /// A special version representing negative infinity,
            /// other fields are ignored.
            /// </summary>
            [pbr::OriginalName("MINIMUM")] Minimum = 1,
            /// <summary>
            /// A special version representing positive infinity,
            /// other fields are ignored.
            /// </summary>
            [pbr::OriginalName("MAXIMUM")] Maximum = 2,
          }

        }
        #endregion

      }

      /// <summary>
      /// An occurrence of a particular package installation found within a
      /// system's filesystem.
      /// e.g. glibc was found in /var/lib/dpkg/status
      /// </summary>
      public sealed partial class Location : pb::IMessage<Location> {
        private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Location> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.PackageManager.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Location() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Location(Location other) : this() {
          cpeUri_ = other.cpeUri_;
          path_ = other.path_;
          Version = other.version_ != null ? other.Version.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Location Clone() {
          return new Location(this);
        }

        /// <summary>Field number for the "cpe_uri" field.</summary>
        public const int CpeUriFieldNumber = 1;
        private string cpeUri_ = "";
        /// <summary>
        /// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
        /// denoting the package manager version distributing a package.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CpeUri {
          get { return cpeUri_; }
          set {
            cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 2;
        private string path_ = "";
        /// <summary>
        /// The path from which we gathered that this package/version is installed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 3;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version version_;
        /// <summary>
        /// The version installed at this location.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Location);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Location other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CpeUri != other.CpeUri) return false;
          if (Path != other.Path) return false;
          if (!object.Equals(Version, other.Version)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (version_ != null) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CpeUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CpeUri);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (version_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CpeUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
          }
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (version_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Location other) {
          if (other == null) {
            return;
          }
          if (other.CpeUri.Length != 0) {
            CpeUri = other.CpeUri;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          if (other.version_ != null) {
            if (version_ == null) {
              version_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
            }
            Version.MergeFrom(other.Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                CpeUri = input.ReadString();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
              case 26: {
                if (version_ == null) {
                  version_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
                }
                input.ReadMessage(version_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// This represents how a particular software package may be installed on
      /// a system.
      /// </summary>
      public sealed partial class Installation : pb::IMessage<Installation> {
        private static readonly pb::MessageParser<Installation> _parser = new pb::MessageParser<Installation>(() => new Installation());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Installation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.PackageManager.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Installation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Installation(Installation other) : this() {
          name_ = other.name_;
          location_ = other.location_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Installation Clone() {
          return new Installation(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// The name of the installed package.
        /// @OutputOnly
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "location" field.</summary>
        public const int LocationFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Location> _repeated_location_codec
            = pb::FieldCodec.ForMessage(18, global::Grafeas.V1Alpha1.Api.PackageManager.Types.Location.Parser);
        private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Location> location_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Location>();
        /// <summary>
        /// All of the places within the filesystem versions of this package
        /// have been found.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.PackageManager.Types.Location> Location {
          get { return location_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Installation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Installation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!location_.Equals(other.location_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= location_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          location_.WriteTo(output, _repeated_location_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += location_.CalculateSize(_repeated_location_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Installation other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          location_.Add(other.location_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                location_.AddEntriesFrom(input, _repeated_location_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// An attestation wrapper with a PGP-compatible signature.
  /// This message only supports ATTACHED signatures, where the payload that is
  /// signed is included alongside the signature itself in the same file.
  /// </summary>
  public sealed partial class PgpSignedAttestation : pb::IMessage<PgpSignedAttestation> {
    private static readonly pb::MessageParser<PgpSignedAttestation> _parser = new pb::MessageParser<PgpSignedAttestation>(() => new PgpSignedAttestation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PgpSignedAttestation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PgpSignedAttestation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PgpSignedAttestation(PgpSignedAttestation other) : this() {
      signature_ = other.signature_;
      contentType_ = other.contentType_;
      switch (other.KeyIdCase) {
        case KeyIdOneofCase.PgpKeyId:
          PgpKeyId = other.PgpKeyId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PgpSignedAttestation Clone() {
      return new PgpSignedAttestation(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private string signature_ = "";
    /// <summary>
    /// The raw content of the signature, as output by gpg or equivalent.  Since
    /// this message only supports attached signatures, the payload that was signed
    /// must be attached. While the signature format supported is dependent on the
    /// verification implementation, currently only ASCII-armored (`--armor` to
    /// gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are
    /// supported.
    /// Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will
    /// create the signature content expected in this field in `signature.gpg` for
    /// the `payload.json` attestation payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_type" field.</summary>
    public const int ContentTypeFieldNumber = 3;
    private global::Grafeas.V1Alpha1.Api.PgpSignedAttestation.Types.ContentType contentType_ = 0;
    /// <summary>
    /// Type (e.g. schema) of the attestation payload that was signed.
    /// The verifier must ensure that the provided type is one that the verifier
    /// supports, and that the attestation payload is a valid instantiation of that
    /// type (e.g. by validating a JSON schema).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.PgpSignedAttestation.Types.ContentType ContentType {
      get { return contentType_; }
      set {
        contentType_ = value;
      }
    }

    /// <summary>Field number for the "pgp_key_id" field.</summary>
    public const int PgpKeyIdFieldNumber = 2;
    /// <summary>
    /// The ID of the key, as output by `gpg --list-keys`.  This should be 8
    /// hexidecimal digits, capitalized.  e.g.
    /// $ gpg --list-keys pub
    /// 2048R/A663AEEA 2017-08-01 uid                  Fake Name
    /// &lt;example-attesting-user@google.com>
    /// In the above example, the `key_id` is "A663AEEA".
    /// Note that in practice this ID is the last 64 bits of the key fingerprint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PgpKeyId {
      get { return keyIdCase_ == KeyIdOneofCase.PgpKeyId ? (string) keyId_ : ""; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        keyIdCase_ = KeyIdOneofCase.PgpKeyId;
      }
    }

    private object keyId_;
    /// <summary>Enum of possible cases for the "key_id" oneof.</summary>
    public enum KeyIdOneofCase {
      None = 0,
      PgpKeyId = 2,
    }
    private KeyIdOneofCase keyIdCase_ = KeyIdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIdOneofCase KeyIdCase {
      get { return keyIdCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyId() {
      keyIdCase_ = KeyIdOneofCase.None;
      keyId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PgpSignedAttestation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PgpSignedAttestation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (ContentType != other.ContentType) return false;
      if (PgpKeyId != other.PgpKeyId) return false;
      if (KeyIdCase != other.KeyIdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (ContentType != 0) hash ^= ContentType.GetHashCode();
      if (keyIdCase_ == KeyIdOneofCase.PgpKeyId) hash ^= PgpKeyId.GetHashCode();
      hash ^= (int) keyIdCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Signature);
      }
      if (keyIdCase_ == KeyIdOneofCase.PgpKeyId) {
        output.WriteRawTag(18);
        output.WriteString(PgpKeyId);
      }
      if (ContentType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ContentType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (ContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContentType);
      }
      if (keyIdCase_ == KeyIdOneofCase.PgpKeyId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PgpKeyId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PgpSignedAttestation other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.ContentType != 0) {
        ContentType = other.ContentType;
      }
      switch (other.KeyIdCase) {
        case KeyIdOneofCase.PgpKeyId:
          PgpKeyId = other.PgpKeyId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadString();
            break;
          }
          case 18: {
            PgpKeyId = input.ReadString();
            break;
          }
          case 24: {
            contentType_ = (global::Grafeas.V1Alpha1.Api.PgpSignedAttestation.Types.ContentType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PgpSignedAttestation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type (e.g. schema) of the attestation payload that was signed.
      /// </summary>
      public enum ContentType {
        /// <summary>
        /// ContentType is not set.
        /// </summary>
        [pbr::OriginalName("CONTENT_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Atomic format attestation signature. See
        /// https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md
        /// The payload extracted from `signature` is a JSON blob conforming to the
        /// linked schema.
        /// </summary>
        [pbr::OriginalName("SIMPLE_SIGNING_JSON")] SimpleSigningJson = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Source describes the location of the source used for the build.
  /// </summary>
  public sealed partial class Source : pb::IMessage<Source> {
    private static readonly pb::MessageParser<Source> _parser = new pb::MessageParser<Source>(() => new Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source(Source other) : this() {
      ArtifactStorageSource = other.artifactStorageSource_ != null ? other.ArtifactStorageSource.Clone() : null;
      SourceContext = other.sourceContext_ != null ? other.SourceContext.Clone() : null;
      additionalSourceContexts_ = other.additionalSourceContexts_.Clone();
      fileHashes_ = other.fileHashes_.Clone();
      switch (other.SourceCase) {
        case SourceOneofCase.StorageSource:
          StorageSource = other.StorageSource.Clone();
          break;
        case SourceOneofCase.RepoSource:
          RepoSource = other.RepoSource.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source Clone() {
      return new Source(this);
    }

    /// <summary>Field number for the "storage_source" field.</summary>
    public const int StorageSourceFieldNumber = 1;
    /// <summary>
    /// If provided, get the source from this location in in Google Cloud
    /// Storage.
    /// (== deprecation_description Source code in Google Cloud Stroage is
    /// not supported. For input binary artifact locations, use
    /// artifact_storage_source instead. ==)
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.StorageSource StorageSource {
      get { return sourceCase_ == SourceOneofCase.StorageSource ? (global::Grafeas.V1Alpha1.Api.StorageSource) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.StorageSource;
      }
    }

    /// <summary>Field number for the "repo_source" field.</summary>
    public const int RepoSourceFieldNumber = 2;
    /// <summary>
    /// If provided, get source from this location in a Cloud Repo.
    /// (== deprecation_description This field has been deprecated. Use
    /// source_context, instead. ==)
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.RepoSource RepoSource {
      get { return sourceCase_ == SourceOneofCase.RepoSource ? (global::Grafeas.V1Alpha1.Api.RepoSource) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.RepoSource;
      }
    }

    /// <summary>Field number for the "artifact_storage_source" field.</summary>
    public const int ArtifactStorageSourceFieldNumber = 4;
    private global::Grafeas.V1Alpha1.Api.StorageSource artifactStorageSource_;
    /// <summary>
    /// If provided, the input binary artifacts for the build came from this
    /// location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.StorageSource ArtifactStorageSource {
      get { return artifactStorageSource_; }
      set {
        artifactStorageSource_ = value;
      }
    }

    /// <summary>Field number for the "source_context" field.</summary>
    public const int SourceContextFieldNumber = 5;
    private global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext sourceContext_;
    /// <summary>
    /// If provided, the source code used for the build came from this location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext SourceContext {
      get { return sourceContext_; }
      set {
        sourceContext_ = value;
      }
    }

    /// <summary>Field number for the "additional_source_contexts" field.</summary>
    public const int AdditionalSourceContextsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext> _repeated_additionalSourceContexts_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext> additionalSourceContexts_ = new pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext>();
    /// <summary>
    /// If provided, some of the source code used for the build may be found in
    /// these locations, in the case where the source repository had multiple
    /// remotes or submodules. This list will not include the context specified in
    /// the source_context field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext> AdditionalSourceContexts {
      get { return additionalSourceContexts_; }
    }

    /// <summary>Field number for the "file_hashes" field.</summary>
    public const int FileHashesFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Grafeas.V1Alpha1.Api.FileHashes>.Codec _map_fileHashes_codec
        = new pbc::MapField<string, global::Grafeas.V1Alpha1.Api.FileHashes>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Grafeas.V1Alpha1.Api.FileHashes.Parser), 26);
    private readonly pbc::MapField<string, global::Grafeas.V1Alpha1.Api.FileHashes> fileHashes_ = new pbc::MapField<string, global::Grafeas.V1Alpha1.Api.FileHashes>();
    /// <summary>
    /// Hash(es) of the build source, which can be used to verify that the original
    /// source integrity was maintained in the build.
    ///
    /// The keys to this map are file paths used as build source and the values
    /// contain the hash values for those files.
    ///
    /// If the build source came in a single package such as a gzipped tarfile
    /// (.tar.gz), the FileHash will be for the single path to that file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Grafeas.V1Alpha1.Api.FileHashes> FileHashes {
      get { return fileHashes_; }
    }

    private object source_;
    /// <summary>Enum of possible cases for the "source" oneof.</summary>
    public enum SourceOneofCase {
      None = 0,
      StorageSource = 1,
      RepoSource = 2,
    }
    private SourceOneofCase sourceCase_ = SourceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOneofCase SourceCase {
      get { return sourceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      sourceCase_ = SourceOneofCase.None;
      source_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StorageSource, other.StorageSource)) return false;
      if (!object.Equals(RepoSource, other.RepoSource)) return false;
      if (!object.Equals(ArtifactStorageSource, other.ArtifactStorageSource)) return false;
      if (!object.Equals(SourceContext, other.SourceContext)) return false;
      if(!additionalSourceContexts_.Equals(other.additionalSourceContexts_)) return false;
      if (!FileHashes.Equals(other.FileHashes)) return false;
      if (SourceCase != other.SourceCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceCase_ == SourceOneofCase.StorageSource) hash ^= StorageSource.GetHashCode();
      if (sourceCase_ == SourceOneofCase.RepoSource) hash ^= RepoSource.GetHashCode();
      if (artifactStorageSource_ != null) hash ^= ArtifactStorageSource.GetHashCode();
      if (sourceContext_ != null) hash ^= SourceContext.GetHashCode();
      hash ^= additionalSourceContexts_.GetHashCode();
      hash ^= FileHashes.GetHashCode();
      hash ^= (int) sourceCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceCase_ == SourceOneofCase.StorageSource) {
        output.WriteRawTag(10);
        output.WriteMessage(StorageSource);
      }
      if (sourceCase_ == SourceOneofCase.RepoSource) {
        output.WriteRawTag(18);
        output.WriteMessage(RepoSource);
      }
      fileHashes_.WriteTo(output, _map_fileHashes_codec);
      if (artifactStorageSource_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ArtifactStorageSource);
      }
      if (sourceContext_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SourceContext);
      }
      additionalSourceContexts_.WriteTo(output, _repeated_additionalSourceContexts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceCase_ == SourceOneofCase.StorageSource) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageSource);
      }
      if (sourceCase_ == SourceOneofCase.RepoSource) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepoSource);
      }
      if (artifactStorageSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactStorageSource);
      }
      if (sourceContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceContext);
      }
      size += additionalSourceContexts_.CalculateSize(_repeated_additionalSourceContexts_codec);
      size += fileHashes_.CalculateSize(_map_fileHashes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Source other) {
      if (other == null) {
        return;
      }
      if (other.artifactStorageSource_ != null) {
        if (artifactStorageSource_ == null) {
          artifactStorageSource_ = new global::Grafeas.V1Alpha1.Api.StorageSource();
        }
        ArtifactStorageSource.MergeFrom(other.ArtifactStorageSource);
      }
      if (other.sourceContext_ != null) {
        if (sourceContext_ == null) {
          sourceContext_ = new global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext();
        }
        SourceContext.MergeFrom(other.SourceContext);
      }
      additionalSourceContexts_.Add(other.additionalSourceContexts_);
      fileHashes_.Add(other.fileHashes_);
      switch (other.SourceCase) {
        case SourceOneofCase.StorageSource:
          StorageSource = other.StorageSource;
          break;
        case SourceOneofCase.RepoSource:
          RepoSource = other.RepoSource;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Grafeas.V1Alpha1.Api.StorageSource subBuilder = new global::Grafeas.V1Alpha1.Api.StorageSource();
            if (sourceCase_ == SourceOneofCase.StorageSource) {
              subBuilder.MergeFrom(StorageSource);
            }
            input.ReadMessage(subBuilder);
            StorageSource = subBuilder;
            break;
          }
          case 18: {
            global::Grafeas.V1Alpha1.Api.RepoSource subBuilder = new global::Grafeas.V1Alpha1.Api.RepoSource();
            if (sourceCase_ == SourceOneofCase.RepoSource) {
              subBuilder.MergeFrom(RepoSource);
            }
            input.ReadMessage(subBuilder);
            RepoSource = subBuilder;
            break;
          }
          case 26: {
            fileHashes_.AddEntriesFrom(input, _map_fileHashes_codec);
            break;
          }
          case 34: {
            if (artifactStorageSource_ == null) {
              artifactStorageSource_ = new global::Grafeas.V1Alpha1.Api.StorageSource();
            }
            input.ReadMessage(artifactStorageSource_);
            break;
          }
          case 42: {
            if (sourceContext_ == null) {
              sourceContext_ = new global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext();
            }
            input.ReadMessage(sourceContext_);
            break;
          }
          case 50: {
            additionalSourceContexts_.AddEntriesFrom(input, _repeated_additionalSourceContexts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RepoSource describes the location of the source in a Google Cloud Source
  /// Repository.
  /// </summary>
  public sealed partial class RepoSource : pb::IMessage<RepoSource> {
    private static readonly pb::MessageParser<RepoSource> _parser = new pb::MessageParser<RepoSource>(() => new RepoSource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepoSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoSource(RepoSource other) : this() {
      projectId_ = other.projectId_;
      repoName_ = other.repoName_;
      switch (other.RevisionCase) {
        case RevisionOneofCase.BranchName:
          BranchName = other.BranchName;
          break;
        case RevisionOneofCase.TagName:
          TagName = other.TagName;
          break;
        case RevisionOneofCase.CommitSha:
          CommitSha = other.CommitSha;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoSource Clone() {
      return new RepoSource(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// ID of the project that owns the repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo_name" field.</summary>
    public const int RepoNameFieldNumber = 2;
    private string repoName_ = "";
    /// <summary>
    /// Name of the repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepoName {
      get { return repoName_; }
      set {
        repoName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "branch_name" field.</summary>
    public const int BranchNameFieldNumber = 3;
    /// <summary>
    /// Name of the branch to build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BranchName {
      get { return revisionCase_ == RevisionOneofCase.BranchName ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.BranchName;
      }
    }

    /// <summary>Field number for the "tag_name" field.</summary>
    public const int TagNameFieldNumber = 4;
    /// <summary>
    ///  Name of the tag to build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TagName {
      get { return revisionCase_ == RevisionOneofCase.TagName ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.TagName;
      }
    }

    /// <summary>Field number for the "commit_sha" field.</summary>
    public const int CommitShaFieldNumber = 5;
    /// <summary>
    /// Explicit commit SHA to build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommitSha {
      get { return revisionCase_ == RevisionOneofCase.CommitSha ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.CommitSha;
      }
    }

    private object revision_;
    /// <summary>Enum of possible cases for the "revision" oneof.</summary>
    public enum RevisionOneofCase {
      None = 0,
      BranchName = 3,
      TagName = 4,
      CommitSha = 5,
    }
    private RevisionOneofCase revisionCase_ = RevisionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionOneofCase RevisionCase {
      get { return revisionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRevision() {
      revisionCase_ = RevisionOneofCase.None;
      revision_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepoSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepoSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (RepoName != other.RepoName) return false;
      if (BranchName != other.BranchName) return false;
      if (TagName != other.TagName) return false;
      if (CommitSha != other.CommitSha) return false;
      if (RevisionCase != other.RevisionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (RepoName.Length != 0) hash ^= RepoName.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.BranchName) hash ^= BranchName.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.TagName) hash ^= TagName.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.CommitSha) hash ^= CommitSha.GetHashCode();
      hash ^= (int) revisionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (RepoName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RepoName);
      }
      if (revisionCase_ == RevisionOneofCase.BranchName) {
        output.WriteRawTag(26);
        output.WriteString(BranchName);
      }
      if (revisionCase_ == RevisionOneofCase.TagName) {
        output.WriteRawTag(34);
        output.WriteString(TagName);
      }
      if (revisionCase_ == RevisionOneofCase.CommitSha) {
        output.WriteRawTag(42);
        output.WriteString(CommitSha);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (RepoName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepoName);
      }
      if (revisionCase_ == RevisionOneofCase.BranchName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BranchName);
      }
      if (revisionCase_ == RevisionOneofCase.TagName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TagName);
      }
      if (revisionCase_ == RevisionOneofCase.CommitSha) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitSha);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepoSource other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.RepoName.Length != 0) {
        RepoName = other.RepoName;
      }
      switch (other.RevisionCase) {
        case RevisionOneofCase.BranchName:
          BranchName = other.BranchName;
          break;
        case RevisionOneofCase.TagName:
          TagName = other.TagName;
          break;
        case RevisionOneofCase.CommitSha:
          CommitSha = other.CommitSha;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            RepoName = input.ReadString();
            break;
          }
          case 26: {
            BranchName = input.ReadString();
            break;
          }
          case 34: {
            TagName = input.ReadString();
            break;
          }
          case 42: {
            CommitSha = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// StorageSource describes the location of the source in an archive file in
  /// Google Cloud Storage.
  /// </summary>
  public sealed partial class StorageSource : pb::IMessage<StorageSource> {
    private static readonly pb::MessageParser<StorageSource> _parser = new pb::MessageParser<StorageSource>(() => new StorageSource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageSource(StorageSource other) : this() {
      bucket_ = other.bucket_;
      generation_ = other.generation_;
      object_ = other.object_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageSource Clone() {
      return new StorageSource(this);
    }

    /// <summary>Field number for the "bucket" field.</summary>
    public const int BucketFieldNumber = 1;
    private string bucket_ = "";
    /// <summary>
    /// Google Cloud Storage bucket containing source (see [Bucket Name
    /// Requirements]
    /// (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bucket {
      get { return bucket_; }
      set {
        bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "generation" field.</summary>
    public const int GenerationFieldNumber = 2;
    private string generation_ = "";
    /// <summary>
    /// Google Cloud Storage generation for the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Generation {
      get { return generation_; }
      set {
        generation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 3;
    private string object_ = "";
    /// <summary>
    /// Google Cloud Storage object containing source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Object {
      get { return object_; }
      set {
        object_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bucket != other.Bucket) return false;
      if (Generation != other.Generation) return false;
      if (Object != other.Object) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
      if (Generation.Length != 0) hash ^= Generation.GetHashCode();
      if (Object.Length != 0) hash ^= Object.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bucket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Bucket);
      }
      if (Generation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Generation);
      }
      if (Object.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Object);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
      }
      if (Generation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Generation);
      }
      if (Object.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Object);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageSource other) {
      if (other == null) {
        return;
      }
      if (other.Bucket.Length != 0) {
        Bucket = other.Bucket;
      }
      if (other.Generation.Length != 0) {
        Generation = other.Generation;
      }
      if (other.Object.Length != 0) {
        Object = other.Object;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Bucket = input.ReadString();
            break;
          }
          case 18: {
            Generation = input.ReadString();
            break;
          }
          case 26: {
            Object = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// VulnerabilityType provides metadata about a security vulnerability.
  /// </summary>
  public sealed partial class VulnerabilityType : pb::IMessage<VulnerabilityType> {
    private static readonly pb::MessageParser<VulnerabilityType> _parser = new pb::MessageParser<VulnerabilityType>(() => new VulnerabilityType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VulnerabilityType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityType(VulnerabilityType other) : this() {
      cvssScore_ = other.cvssScore_;
      severity_ = other.severity_;
      details_ = other.details_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityType Clone() {
      return new VulnerabilityType(this);
    }

    /// <summary>Field number for the "cvss_score" field.</summary>
    public const int CvssScoreFieldNumber = 2;
    private float cvssScore_;
    /// <summary>
    /// The CVSS score for this Vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CvssScore {
      get { return cvssScore_; }
      set {
        cvssScore_ = value;
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 3;
    private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Severity severity_ = 0;
    /// <summary>
    /// Note provider assigned impact of the vulnerability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Detail> _repeated_details_codec
        = pb::FieldCodec.ForMessage(34, global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Detail.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Detail> details_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Detail>();
    /// <summary>
    /// All information about the package to specifically identify this
    /// vulnerability. One entry per (version range and cpe_uri) the
    /// package vulnerability has manifested in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Detail> Details {
      get { return details_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VulnerabilityType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VulnerabilityType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CvssScore != other.CvssScore) return false;
      if (Severity != other.Severity) return false;
      if(!details_.Equals(other.details_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CvssScore != 0F) hash ^= CvssScore.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      hash ^= details_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CvssScore != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CvssScore);
      }
      if (Severity != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Severity);
      }
      details_.WriteTo(output, _repeated_details_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CvssScore != 0F) {
        size += 1 + 4;
      }
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      size += details_.CalculateSize(_repeated_details_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VulnerabilityType other) {
      if (other == null) {
        return;
      }
      if (other.CvssScore != 0F) {
        CvssScore = other.CvssScore;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      details_.Add(other.details_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 21: {
            CvssScore = input.ReadFloat();
            break;
          }
          case 24: {
            severity_ = (global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Severity) input.ReadEnum();
            break;
          }
          case 34: {
            details_.AddEntriesFrom(input, _repeated_details_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VulnerabilityType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Note provider-assigned severity/impact ranking
      /// </summary>
      public enum Severity {
        /// <summary>
        /// Unknown Impact
        /// </summary>
        [pbr::OriginalName("SEVERITY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Minimal Impact
        /// </summary>
        [pbr::OriginalName("MINIMAL")] Minimal = 1,
        /// <summary>
        /// Low Impact
        /// </summary>
        [pbr::OriginalName("LOW")] Low = 2,
        /// <summary>
        /// Medium Impact
        /// </summary>
        [pbr::OriginalName("MEDIUM")] Medium = 3,
        /// <summary>
        /// High Impact
        /// </summary>
        [pbr::OriginalName("HIGH")] High = 4,
        /// <summary>
        /// Critical Impact
        /// </summary>
        [pbr::OriginalName("CRITICAL")] Critical = 5,
      }

      /// <summary>
      /// Version contains structured information about the version of the package.
      /// For a discussion of this in Debian/Ubuntu:
      /// http://serverfault.com/questions/604541/debian-packages-version-convention
      /// For a discussion of this in Redhat/Fedora/Centos:
      /// http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
      /// </summary>
      public sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.VulnerabilityType.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          epoch_ = other.epoch_;
          name_ = other.name_;
          revision_ = other.revision_;
          kind_ = other.kind_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "epoch" field.</summary>
        public const int EpochFieldNumber = 1;
        private int epoch_;
        /// <summary>
        /// Used to correct mistakes in the version numbering scheme.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Epoch {
          get { return epoch_; }
          set {
            epoch_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// The main part of the version name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "revision" field.</summary>
        public const int RevisionFieldNumber = 3;
        private string revision_ = "";
        /// <summary>
        /// The iteration of the package build from the above version.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Revision {
          get { return revision_; }
          set {
            revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 5;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version.Types.VersionKind kind_ = 0;
        /// <summary>
        /// Distinguish between sentinel MIN/MAX versions and normal versions.
        /// If kind is not NORMAL, then the other fields are ignored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version.Types.VersionKind Kind {
          get { return kind_; }
          set {
            kind_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Epoch != other.Epoch) return false;
          if (Name != other.Name) return false;
          if (Revision != other.Revision) return false;
          if (Kind != other.Kind) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Epoch != 0) hash ^= Epoch.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Revision.Length != 0) hash ^= Revision.GetHashCode();
          if (Kind != 0) hash ^= Kind.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Epoch != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Epoch);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Revision.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Revision);
          }
          if (Kind != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Kind);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Epoch != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Epoch);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Revision.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Revision);
          }
          if (Kind != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.Epoch != 0) {
            Epoch = other.Epoch;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Revision.Length != 0) {
            Revision = other.Revision;
          }
          if (other.Kind != 0) {
            Kind = other.Kind;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Epoch = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Revision = input.ReadString();
                break;
              }
              case 40: {
                kind_ = (global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version.Types.VersionKind) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Version message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Whether this is an ordinary package version or a
          /// sentinel MIN/MAX version.
          /// </summary>
          public enum VersionKind {
            /// <summary>
            /// A standard package version, defined by the other fields.
            /// </summary>
            [pbr::OriginalName("NORMAL")] Normal = 0,
            /// <summary>
            /// A special version representing negative infinity,
            /// other fields are ignored.
            /// </summary>
            [pbr::OriginalName("MINIMUM")] Minimum = 1,
            /// <summary>
            /// A special version representing positive infinity,
            /// other fields are ignored.
            /// </summary>
            [pbr::OriginalName("MAXIMUM")] Maximum = 2,
          }

        }
        #endregion

      }

      /// <summary>
      /// Identifies all occurences of this vulnerability in the package for a
      /// specific distro/location
      /// For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
      /// </summary>
      public sealed partial class Detail : pb::IMessage<Detail> {
        private static readonly pb::MessageParser<Detail> _parser = new pb::MessageParser<Detail>(() => new Detail());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Detail> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.VulnerabilityType.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Detail() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Detail(Detail other) : this() {
          cpeUri_ = other.cpeUri_;
          package_ = other.package_;
          MinAffectedVersion = other.minAffectedVersion_ != null ? other.MinAffectedVersion.Clone() : null;
          MaxAffectedVersion = other.maxAffectedVersion_ != null ? other.MaxAffectedVersion.Clone() : null;
          severityName_ = other.severityName_;
          description_ = other.description_;
          FixedLocation = other.fixedLocation_ != null ? other.FixedLocation.Clone() : null;
          packageType_ = other.packageType_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Detail Clone() {
          return new Detail(this);
        }

        /// <summary>Field number for the "cpe_uri" field.</summary>
        public const int CpeUriFieldNumber = 1;
        private string cpeUri_ = "";
        /// <summary>
        /// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in
        /// which the vulnerability manifests.  Examples include distro or storage
        /// location for vulnerable jar.
        /// This field can be used as a filter in list requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CpeUri {
          get { return cpeUri_; }
          set {
            cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "package" field.</summary>
        public const int PackageFieldNumber = 8;
        private string package_ = "";
        /// <summary>
        /// The name of the package where the vulnerability was found.
        /// This field can be used as a filter in list requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Package {
          get { return package_; }
          set {
            package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "min_affected_version" field.</summary>
        public const int MinAffectedVersionFieldNumber = 6;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version minAffectedVersion_;
        /// <summary>
        /// The min version of the package in which the vulnerability exists.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version MinAffectedVersion {
          get { return minAffectedVersion_; }
          set {
            minAffectedVersion_ = value;
          }
        }

        /// <summary>Field number for the "max_affected_version" field.</summary>
        public const int MaxAffectedVersionFieldNumber = 7;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version maxAffectedVersion_;
        /// <summary>
        /// The max version of the package in which the vulnerability exists.
        /// This field can be used as a filter in list requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version MaxAffectedVersion {
          get { return maxAffectedVersion_; }
          set {
            maxAffectedVersion_ = value;
          }
        }

        /// <summary>Field number for the "severity_name" field.</summary>
        public const int SeverityNameFieldNumber = 4;
        private string severityName_ = "";
        /// <summary>
        /// The severity (eg: distro assigned severity) for this vulnerability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SeverityName {
          get { return severityName_; }
          set {
            severityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 9;
        private string description_ = "";
        /// <summary>
        /// A vendor-specific description of this note.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fixed_location" field.</summary>
        public const int FixedLocationFieldNumber = 5;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation fixedLocation_;
        /// <summary>
        /// The fix for this specific package version.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation FixedLocation {
          get { return fixedLocation_; }
          set {
            fixedLocation_ = value;
          }
        }

        /// <summary>Field number for the "package_type" field.</summary>
        public const int PackageTypeFieldNumber = 10;
        private string packageType_ = "";
        /// <summary>
        /// The type of package; whether native or non native(ruby gems,
        /// node.js packages etc)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PackageType {
          get { return packageType_; }
          set {
            packageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Detail);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Detail other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CpeUri != other.CpeUri) return false;
          if (Package != other.Package) return false;
          if (!object.Equals(MinAffectedVersion, other.MinAffectedVersion)) return false;
          if (!object.Equals(MaxAffectedVersion, other.MaxAffectedVersion)) return false;
          if (SeverityName != other.SeverityName) return false;
          if (Description != other.Description) return false;
          if (!object.Equals(FixedLocation, other.FixedLocation)) return false;
          if (PackageType != other.PackageType) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
          if (Package.Length != 0) hash ^= Package.GetHashCode();
          if (minAffectedVersion_ != null) hash ^= MinAffectedVersion.GetHashCode();
          if (maxAffectedVersion_ != null) hash ^= MaxAffectedVersion.GetHashCode();
          if (SeverityName.Length != 0) hash ^= SeverityName.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (fixedLocation_ != null) hash ^= FixedLocation.GetHashCode();
          if (PackageType.Length != 0) hash ^= PackageType.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CpeUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CpeUri);
          }
          if (SeverityName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SeverityName);
          }
          if (fixedLocation_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(FixedLocation);
          }
          if (minAffectedVersion_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(MinAffectedVersion);
          }
          if (maxAffectedVersion_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(MaxAffectedVersion);
          }
          if (Package.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(Package);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(Description);
          }
          if (PackageType.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(PackageType);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CpeUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
          }
          if (Package.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Package);
          }
          if (minAffectedVersion_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinAffectedVersion);
          }
          if (maxAffectedVersion_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxAffectedVersion);
          }
          if (SeverityName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SeverityName);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (fixedLocation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedLocation);
          }
          if (PackageType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageType);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Detail other) {
          if (other == null) {
            return;
          }
          if (other.CpeUri.Length != 0) {
            CpeUri = other.CpeUri;
          }
          if (other.Package.Length != 0) {
            Package = other.Package;
          }
          if (other.minAffectedVersion_ != null) {
            if (minAffectedVersion_ == null) {
              minAffectedVersion_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
            }
            MinAffectedVersion.MergeFrom(other.MinAffectedVersion);
          }
          if (other.maxAffectedVersion_ != null) {
            if (maxAffectedVersion_ == null) {
              maxAffectedVersion_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
            }
            MaxAffectedVersion.MergeFrom(other.MaxAffectedVersion);
          }
          if (other.SeverityName.Length != 0) {
            SeverityName = other.SeverityName;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.fixedLocation_ != null) {
            if (fixedLocation_ == null) {
              fixedLocation_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation();
            }
            FixedLocation.MergeFrom(other.FixedLocation);
          }
          if (other.PackageType.Length != 0) {
            PackageType = other.PackageType;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                CpeUri = input.ReadString();
                break;
              }
              case 34: {
                SeverityName = input.ReadString();
                break;
              }
              case 42: {
                if (fixedLocation_ == null) {
                  fixedLocation_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation();
                }
                input.ReadMessage(fixedLocation_);
                break;
              }
              case 50: {
                if (minAffectedVersion_ == null) {
                  minAffectedVersion_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
                }
                input.ReadMessage(minAffectedVersion_);
                break;
              }
              case 58: {
                if (maxAffectedVersion_ == null) {
                  maxAffectedVersion_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
                }
                input.ReadMessage(maxAffectedVersion_);
                break;
              }
              case 66: {
                Package = input.ReadString();
                break;
              }
              case 74: {
                Description = input.ReadString();
                break;
              }
              case 82: {
                PackageType = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Used by Occurrence to point to where the vulnerability exists and how
      /// to fix it.
      /// </summary>
      public sealed partial class VulnerabilityDetails : pb::IMessage<VulnerabilityDetails> {
        private static readonly pb::MessageParser<VulnerabilityDetails> _parser = new pb::MessageParser<VulnerabilityDetails>(() => new VulnerabilityDetails());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VulnerabilityDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.VulnerabilityType.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VulnerabilityDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VulnerabilityDetails(VulnerabilityDetails other) : this() {
          type_ = other.type_;
          severity_ = other.severity_;
          cvssScore_ = other.cvssScore_;
          packageIssue_ = other.packageIssue_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VulnerabilityDetails Clone() {
          return new VulnerabilityDetails(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private string type_ = "";
        /// <summary>
        /// The type of package; whether native or non native(ruby gems,
        /// node.js packages etc)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type {
          get { return type_; }
          set {
            type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "severity" field.</summary>
        public const int SeverityFieldNumber = 4;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Severity severity_ = 0;
        /// <summary>
        /// The note provider assigned Severity of the vulnerability.
        /// @OutputOnly
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Severity Severity {
          get { return severity_; }
          set {
            severity_ = value;
          }
        }

        /// <summary>Field number for the "cvss_score" field.</summary>
        public const int CvssScoreFieldNumber = 5;
        private float cvssScore_;
        /// <summary>
        /// The CVSS score of this vulnerability. CVSS score is on a scale of 0-10
        /// where 0 indicates low severity and 10 indicates high severity.
        /// @OutputOnly
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CvssScore {
          get { return cvssScore_; }
          set {
            cvssScore_ = value;
          }
        }

        /// <summary>Field number for the "package_issue" field.</summary>
        public const int PackageIssueFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.PackageIssue> _repeated_packageIssue_codec
            = pb::FieldCodec.ForMessage(50, global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.PackageIssue.Parser);
        private readonly pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.PackageIssue> packageIssue_ = new pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.PackageIssue>();
        /// <summary>
        /// The set of affected locations and their fixes (if available) within
        /// the associated resource.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.PackageIssue> PackageIssue {
          get { return packageIssue_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VulnerabilityDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VulnerabilityDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Severity != other.Severity) return false;
          if (CvssScore != other.CvssScore) return false;
          if(!packageIssue_.Equals(other.packageIssue_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type.Length != 0) hash ^= Type.GetHashCode();
          if (Severity != 0) hash ^= Severity.GetHashCode();
          if (CvssScore != 0F) hash ^= CvssScore.GetHashCode();
          hash ^= packageIssue_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Type);
          }
          if (Severity != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Severity);
          }
          if (CvssScore != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(CvssScore);
          }
          packageIssue_.WriteTo(output, _repeated_packageIssue_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
          }
          if (Severity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
          }
          if (CvssScore != 0F) {
            size += 1 + 4;
          }
          size += packageIssue_.CalculateSize(_repeated_packageIssue_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VulnerabilityDetails other) {
          if (other == null) {
            return;
          }
          if (other.Type.Length != 0) {
            Type = other.Type;
          }
          if (other.Severity != 0) {
            Severity = other.Severity;
          }
          if (other.CvssScore != 0F) {
            CvssScore = other.CvssScore;
          }
          packageIssue_.Add(other.packageIssue_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 26: {
                Type = input.ReadString();
                break;
              }
              case 32: {
                severity_ = (global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Severity) input.ReadEnum();
                break;
              }
              case 45: {
                CvssScore = input.ReadFloat();
                break;
              }
              case 50: {
                packageIssue_.AddEntriesFrom(input, _repeated_packageIssue_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// This message wraps a location affected by a vulnerability and its
      /// associated fix (if one is available).
      /// </summary>
      public sealed partial class PackageIssue : pb::IMessage<PackageIssue> {
        private static readonly pb::MessageParser<PackageIssue> _parser = new pb::MessageParser<PackageIssue>(() => new PackageIssue());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PackageIssue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.VulnerabilityType.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PackageIssue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PackageIssue(PackageIssue other) : this() {
          AffectedLocation = other.affectedLocation_ != null ? other.AffectedLocation.Clone() : null;
          FixedLocation = other.fixedLocation_ != null ? other.FixedLocation.Clone() : null;
          severityName_ = other.severityName_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PackageIssue Clone() {
          return new PackageIssue(this);
        }

        /// <summary>Field number for the "affected_location" field.</summary>
        public const int AffectedLocationFieldNumber = 1;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation affectedLocation_;
        /// <summary>
        /// The location of the vulnerability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation AffectedLocation {
          get { return affectedLocation_; }
          set {
            affectedLocation_ = value;
          }
        }

        /// <summary>Field number for the "fixed_location" field.</summary>
        public const int FixedLocationFieldNumber = 2;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation fixedLocation_;
        /// <summary>
        /// The location of the available fix for vulnerability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation FixedLocation {
          get { return fixedLocation_; }
          set {
            fixedLocation_ = value;
          }
        }

        /// <summary>Field number for the "severity_name" field.</summary>
        public const int SeverityNameFieldNumber = 3;
        private string severityName_ = "";
        /// <summary>
        /// The severity (eg: distro assigned severity) for this vulnerability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SeverityName {
          get { return severityName_; }
          set {
            severityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PackageIssue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PackageIssue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AffectedLocation, other.AffectedLocation)) return false;
          if (!object.Equals(FixedLocation, other.FixedLocation)) return false;
          if (SeverityName != other.SeverityName) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (affectedLocation_ != null) hash ^= AffectedLocation.GetHashCode();
          if (fixedLocation_ != null) hash ^= FixedLocation.GetHashCode();
          if (SeverityName.Length != 0) hash ^= SeverityName.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (affectedLocation_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(AffectedLocation);
          }
          if (fixedLocation_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FixedLocation);
          }
          if (SeverityName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(SeverityName);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (affectedLocation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AffectedLocation);
          }
          if (fixedLocation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedLocation);
          }
          if (SeverityName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SeverityName);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PackageIssue other) {
          if (other == null) {
            return;
          }
          if (other.affectedLocation_ != null) {
            if (affectedLocation_ == null) {
              affectedLocation_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation();
            }
            AffectedLocation.MergeFrom(other.AffectedLocation);
          }
          if (other.fixedLocation_ != null) {
            if (fixedLocation_ == null) {
              fixedLocation_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation();
            }
            FixedLocation.MergeFrom(other.FixedLocation);
          }
          if (other.SeverityName.Length != 0) {
            SeverityName = other.SeverityName;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (affectedLocation_ == null) {
                  affectedLocation_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation();
                }
                input.ReadMessage(affectedLocation_);
                break;
              }
              case 18: {
                if (fixedLocation_ == null) {
                  fixedLocation_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.VulnerabilityLocation();
                }
                input.ReadMessage(fixedLocation_);
                break;
              }
              case 26: {
                SeverityName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The location of the vulnerability
      /// </summary>
      public sealed partial class VulnerabilityLocation : pb::IMessage<VulnerabilityLocation> {
        private static readonly pb::MessageParser<VulnerabilityLocation> _parser = new pb::MessageParser<VulnerabilityLocation>(() => new VulnerabilityLocation());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VulnerabilityLocation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Alpha1.Api.VulnerabilityType.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VulnerabilityLocation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VulnerabilityLocation(VulnerabilityLocation other) : this() {
          cpeUri_ = other.cpeUri_;
          package_ = other.package_;
          Version = other.version_ != null ? other.Version.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VulnerabilityLocation Clone() {
          return new VulnerabilityLocation(this);
        }

        /// <summary>Field number for the "cpe_uri" field.</summary>
        public const int CpeUriFieldNumber = 1;
        private string cpeUri_ = "";
        /// <summary>
        /// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)
        /// format. Examples include distro or storage location for vulnerable jar.
        /// This field can be used as a filter in list requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CpeUri {
          get { return cpeUri_; }
          set {
            cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "package" field.</summary>
        public const int PackageFieldNumber = 2;
        private string package_ = "";
        /// <summary>
        /// The package being described.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Package {
          get { return package_; }
          set {
            package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 4;
        private global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version version_;
        /// <summary>
        /// The version of the package being described.
        /// This field can be used as a filter in list requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VulnerabilityLocation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VulnerabilityLocation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CpeUri != other.CpeUri) return false;
          if (Package != other.Package) return false;
          if (!object.Equals(Version, other.Version)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
          if (Package.Length != 0) hash ^= Package.GetHashCode();
          if (version_ != null) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CpeUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CpeUri);
          }
          if (Package.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Package);
          }
          if (version_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CpeUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
          }
          if (Package.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Package);
          }
          if (version_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VulnerabilityLocation other) {
          if (other == null) {
            return;
          }
          if (other.CpeUri.Length != 0) {
            CpeUri = other.CpeUri;
          }
          if (other.Package.Length != 0) {
            Package = other.Package;
          }
          if (other.version_ != null) {
            if (version_ == null) {
              version_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
            }
            Version.MergeFrom(other.Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                CpeUri = input.ReadString();
                break;
              }
              case 18: {
                Package = input.ReadString();
                break;
              }
              case 34: {
                if (version_ == null) {
                  version_ = new global::Grafeas.V1Alpha1.Api.VulnerabilityType.Types.Version();
                }
                input.ReadMessage(version_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
