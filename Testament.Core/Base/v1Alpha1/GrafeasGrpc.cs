// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1alpha1/proto/grafeas.proto
// Original file comments:
// Copyright 2017 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Grafeas.V1Alpha1.Api {
  public static partial class Grafeas
  {
    static readonly string __ServiceName = "grafeas.v1alpha1.api.Grafeas";

    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest> __Marshaller_GetOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.Occurrence> __Marshaller_Occurrence = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.Occurrence.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest> __Marshaller_ListOccurrencesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse> __Marshaller_ListOccurrencesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest> __Marshaller_DeleteOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest> __Marshaller_CreateOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest> __Marshaller_UpdateOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest> __Marshaller_GetOccurrenceNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.Note> __Marshaller_Note = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.Note.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.GetNoteRequest> __Marshaller_GetNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.GetNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.ListNotesRequest> __Marshaller_ListNotesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.ListNotesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.ListNotesResponse> __Marshaller_ListNotesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.ListNotesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.DeleteNoteRequest> __Marshaller_DeleteNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.DeleteNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.CreateNoteRequest> __Marshaller_CreateNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.CreateNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.UpdateNoteRequest> __Marshaller_UpdateNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.UpdateNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest> __Marshaller_ListNoteOccurrencesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse> __Marshaller_ListNoteOccurrencesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.CreateOperationRequest> __Marshaller_CreateOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.CreateOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Alpha1.Api.UpdateOperationRequest> __Marshaller_UpdateOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Alpha1.Api.UpdateOperationRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest, global::Grafeas.V1Alpha1.Api.Occurrence> __Method_GetOccurrence = new grpc::Method<global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest, global::Grafeas.V1Alpha1.Api.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrence",
        __Marshaller_GetOccurrenceRequest,
        __Marshaller_Occurrence);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest, global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse> __Method_ListOccurrences = new grpc::Method<global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest, global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOccurrences",
        __Marshaller_ListOccurrencesRequest,
        __Marshaller_ListOccurrencesResponse);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteOccurrence = new grpc::Method<global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOccurrence",
        __Marshaller_DeleteOccurrenceRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest, global::Grafeas.V1Alpha1.Api.Occurrence> __Method_CreateOccurrence = new grpc::Method<global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest, global::Grafeas.V1Alpha1.Api.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOccurrence",
        __Marshaller_CreateOccurrenceRequest,
        __Marshaller_Occurrence);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest, global::Grafeas.V1Alpha1.Api.Occurrence> __Method_UpdateOccurrence = new grpc::Method<global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest, global::Grafeas.V1Alpha1.Api.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOccurrence",
        __Marshaller_UpdateOccurrenceRequest,
        __Marshaller_Occurrence);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest, global::Grafeas.V1Alpha1.Api.Note> __Method_GetOccurrenceNote = new grpc::Method<global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest, global::Grafeas.V1Alpha1.Api.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrenceNote",
        __Marshaller_GetOccurrenceNoteRequest,
        __Marshaller_Note);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.GetNoteRequest, global::Grafeas.V1Alpha1.Api.Note> __Method_GetNote = new grpc::Method<global::Grafeas.V1Alpha1.Api.GetNoteRequest, global::Grafeas.V1Alpha1.Api.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNote",
        __Marshaller_GetNoteRequest,
        __Marshaller_Note);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.ListNotesRequest, global::Grafeas.V1Alpha1.Api.ListNotesResponse> __Method_ListNotes = new grpc::Method<global::Grafeas.V1Alpha1.Api.ListNotesRequest, global::Grafeas.V1Alpha1.Api.ListNotesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNotes",
        __Marshaller_ListNotesRequest,
        __Marshaller_ListNotesResponse);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteNote = new grpc::Method<global::Grafeas.V1Alpha1.Api.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNote",
        __Marshaller_DeleteNoteRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.CreateNoteRequest, global::Grafeas.V1Alpha1.Api.Note> __Method_CreateNote = new grpc::Method<global::Grafeas.V1Alpha1.Api.CreateNoteRequest, global::Grafeas.V1Alpha1.Api.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNote",
        __Marshaller_CreateNoteRequest,
        __Marshaller_Note);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.UpdateNoteRequest, global::Grafeas.V1Alpha1.Api.Note> __Method_UpdateNote = new grpc::Method<global::Grafeas.V1Alpha1.Api.UpdateNoteRequest, global::Grafeas.V1Alpha1.Api.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNote",
        __Marshaller_UpdateNoteRequest,
        __Marshaller_Note);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest, global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse> __Method_ListNoteOccurrences = new grpc::Method<global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest, global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNoteOccurrences",
        __Marshaller_ListNoteOccurrencesRequest,
        __Marshaller_ListNoteOccurrencesResponse);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.CreateOperationRequest, global::Google.LongRunning.Operation> __Method_CreateOperation = new grpc::Method<global::Grafeas.V1Alpha1.Api.CreateOperationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOperation",
        __Marshaller_CreateOperationRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Grafeas.V1Alpha1.Api.UpdateOperationRequest, global::Google.LongRunning.Operation> __Method_UpdateOperation = new grpc::Method<global::Grafeas.V1Alpha1.Api.UpdateOperationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOperation",
        __Marshaller_UpdateOperationRequest,
        __Marshaller_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grafeas.V1Alpha1.Api.GrafeasReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Grafeas</summary>
    public abstract partial class GrafeasBase
    {
      /// <summary>
      /// Returns the requested occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.Occurrence> GetOccurrence(global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists active occurrences for a given project/Digest.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse> ListOccurrences(global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the given occurrence from the system.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrence(global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.Occurrence> CreateOccurrence(global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.Occurrence> UpdateOccurrence(global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the note that this occurrence is attached to.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.Note> GetOccurrenceNote(global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the requested occurrence
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.Note> GetNote(global::Grafeas.V1Alpha1.Api.GetNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all notes for a given project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.ListNotesResponse> ListNotes(global::Grafeas.V1Alpha1.Api.ListNotesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the given note from the system.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNote(global::Grafeas.V1Alpha1.Api.DeleteNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.Note> CreateNote(global::Grafeas.V1Alpha1.Api.CreateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.Note> UpdateNote(global::Grafeas.V1Alpha1.Api.UpdateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the names of occurrences linked to a particular note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse> ListNoteOccurrences(global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new operation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateOperation(global::Grafeas.V1Alpha1.Api.CreateOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateOperation(global::Grafeas.V1Alpha1.Api.UpdateOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Grafeas</summary>
    public partial class GrafeasClient : grpc::ClientBase<GrafeasClient>
    {
      /// <summary>Creates a new client for Grafeas</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrafeasClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Grafeas that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrafeasClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrafeasClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrafeasClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the requested occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Occurrence GetOccurrence(global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Occurrence GetOccurrence(global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Returns the requested occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Occurrence> GetOccurrenceAsync(global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Occurrence> GetOccurrenceAsync(global::Grafeas.V1Alpha1.Api.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Lists active occurrences for a given project/Digest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse ListOccurrences(global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists active occurrences for a given project/Digest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse ListOccurrences(global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists active occurrences for a given project/Digest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse> ListOccurrencesAsync(global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists active occurrences for a given project/Digest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.ListOccurrencesResponse> ListOccurrencesAsync(global::Grafeas.V1Alpha1.Api.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Deletes the given occurrence from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given occurrence from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Deletes the given occurrence from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given occurrence from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Grafeas.V1Alpha1.Api.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Occurrence CreateOccurrence(global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Occurrence CreateOccurrence(global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Occurrence> CreateOccurrenceAsync(global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Occurrence> CreateOccurrenceAsync(global::Grafeas.V1Alpha1.Api.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Occurrence UpdateOccurrence(global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Occurrence UpdateOccurrence(global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Occurrence> UpdateOccurrenceAsync(global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Occurrence> UpdateOccurrenceAsync(global::Grafeas.V1Alpha1.Api.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Gets the note that this occurrence is attached to.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note GetOccurrenceNote(global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOccurrenceNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the note that this occurrence is attached to.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note GetOccurrenceNote(global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Gets the note that this occurrence is attached to.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> GetOccurrenceNoteAsync(global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOccurrenceNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the note that this occurrence is attached to.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> GetOccurrenceNoteAsync(global::Grafeas.V1Alpha1.Api.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Returns the requested occurrence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note GetNote(global::Grafeas.V1Alpha1.Api.GetNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested occurrence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note GetNote(global::Grafeas.V1Alpha1.Api.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Returns the requested occurrence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> GetNoteAsync(global::Grafeas.V1Alpha1.Api.GetNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested occurrence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> GetNoteAsync(global::Grafeas.V1Alpha1.Api.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Lists all notes for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.ListNotesResponse ListNotes(global::Grafeas.V1Alpha1.Api.ListNotesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNotes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all notes for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.ListNotesResponse ListNotes(global::Grafeas.V1Alpha1.Api.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Lists all notes for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.ListNotesResponse> ListNotesAsync(global::Grafeas.V1Alpha1.Api.ListNotesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNotesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all notes for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.ListNotesResponse> ListNotesAsync(global::Grafeas.V1Alpha1.Api.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Deletes the given note from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Grafeas.V1Alpha1.Api.DeleteNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given note from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Grafeas.V1Alpha1.Api.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Deletes the given note from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Grafeas.V1Alpha1.Api.DeleteNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given note from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Grafeas.V1Alpha1.Api.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note CreateNote(global::Grafeas.V1Alpha1.Api.CreateNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note CreateNote(global::Grafeas.V1Alpha1.Api.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> CreateNoteAsync(global::Grafeas.V1Alpha1.Api.CreateNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> CreateNoteAsync(global::Grafeas.V1Alpha1.Api.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Updates an existing note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note UpdateNote(global::Grafeas.V1Alpha1.Api.UpdateNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.Note UpdateNote(global::Grafeas.V1Alpha1.Api.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Updates an existing note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> UpdateNoteAsync(global::Grafeas.V1Alpha1.Api.UpdateNoteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.Note> UpdateNoteAsync(global::Grafeas.V1Alpha1.Api.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Lists the names of occurrences linked to a particular note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse ListNoteOccurrences(global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNoteOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the names of occurrences linked to a particular note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse ListNoteOccurrences(global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists the names of occurrences linked to a particular note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNoteOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the names of occurrences linked to a particular note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Grafeas.V1Alpha1.Api.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>
      /// Creates a new operation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateOperation(global::Grafeas.V1Alpha1.Api.CreateOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new operation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateOperation(global::Grafeas.V1Alpha1.Api.CreateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOperation, null, options, request);
      }
      /// <summary>
      /// Creates a new operation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateOperationAsync(global::Grafeas.V1Alpha1.Api.CreateOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new operation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateOperationAsync(global::Grafeas.V1Alpha1.Api.CreateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOperation, null, options, request);
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateOperation(global::Grafeas.V1Alpha1.Api.UpdateOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateOperation(global::Grafeas.V1Alpha1.Api.UpdateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOperation, null, options, request);
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateOperationAsync(global::Grafeas.V1Alpha1.Api.UpdateOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateOperationAsync(global::Grafeas.V1Alpha1.Api.UpdateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOperation, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GrafeasClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrafeasClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GrafeasBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetOccurrence, serviceImpl.GetOccurrence)
          .AddMethod(__Method_ListOccurrences, serviceImpl.ListOccurrences)
          .AddMethod(__Method_DeleteOccurrence, serviceImpl.DeleteOccurrence)
          .AddMethod(__Method_CreateOccurrence, serviceImpl.CreateOccurrence)
          .AddMethod(__Method_UpdateOccurrence, serviceImpl.UpdateOccurrence)
          .AddMethod(__Method_GetOccurrenceNote, serviceImpl.GetOccurrenceNote)
          .AddMethod(__Method_GetNote, serviceImpl.GetNote)
          .AddMethod(__Method_ListNotes, serviceImpl.ListNotes)
          .AddMethod(__Method_DeleteNote, serviceImpl.DeleteNote)
          .AddMethod(__Method_CreateNote, serviceImpl.CreateNote)
          .AddMethod(__Method_UpdateNote, serviceImpl.UpdateNote)
          .AddMethod(__Method_ListNoteOccurrences, serviceImpl.ListNoteOccurrences)
          .AddMethod(__Method_CreateOperation, serviceImpl.CreateOperation)
          .AddMethod(__Method_UpdateOperation, serviceImpl.UpdateOperation).Build();
    }

  }
}
#endregion
